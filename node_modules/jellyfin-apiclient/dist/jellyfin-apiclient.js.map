{"version":3,"file":"jellyfin-apiclient.js","mappings":"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","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand","webpack://[name]/./src/events.js","webpack://[name]/./src/appStorage.js","webpack://[name]/./src/apiClient.js","webpack://[name]/./src/apiClientCore.js","webpack://[name]/./src/connectionManager.js","webpack://[name]/./src/credentials.js","webpack://[name]/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jellyfin-apiclient\"] = factory();\n\telse\n\t\troot[\"jellyfin-apiclient\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","function getCallbacks(obj, name) {\n    if (!obj) {\n        throw new Error('obj cannot be null!');\n    }\n\n    obj._callbacks = obj._callbacks || {};\n\n    let list = obj._callbacks[name];\n\n    if (!list) {\n        obj._callbacks[name] = [];\n        list = obj._callbacks[name];\n    }\n\n    return list;\n}\n\nexport default {\n    on(obj, eventName, fn) {\n        const list = getCallbacks(obj, eventName);\n\n        list.push(fn);\n    },\n\n    off(obj, eventName, fn) {\n        const list = getCallbacks(obj, eventName);\n\n        const i = list.indexOf(fn);\n        if (i !== -1) {\n            list.splice(i, 1);\n        }\n    },\n\n    trigger(obj, eventName) {\n        const eventObject = {\n            type: eventName\n        };\n\n        const eventArgs = [];\n        eventArgs.push(eventObject);\n\n        const additionalArgs = arguments[2] || [];\n        for (let i = 0, length = additionalArgs.length; i < length; i++) {\n            eventArgs.push(additionalArgs[i]);\n        }\n\n        const callbacks = getCallbacks(obj, eventName).slice(0);\n\n        callbacks.forEach((c) => {\n            c.apply(obj, eventArgs);\n        });\n    }\n};\n","function onCachePutFail(e) {\n    console.log(e);\n}\n\nfunction updateCache(instance) {\n    const cache = instance.cache;\n    if (cache) {\n        cache.put('data', new Response(JSON.stringify(instance.localData))).catch(onCachePutFail);\n    }\n}\n\nfunction onCacheOpened(result) {\n    this.cache = result;\n    this.localData = {};\n}\n\nclass AppStore {\n    constructor() {\n        try {\n            if (self && self.caches) {\n                caches.open('embydata').then(onCacheOpened.bind(this));\n            }\n        } catch (err) {\n            console.log(`Error opening cache: ${err}`);\n        }\n    }\n\n    setItem(name, value) {\n        localStorage.setItem(name, value);\n        const localData = this.localData;\n        if (localData) {\n            const changed = localData[name] !== value;\n            if (changed) {\n                localData[name] = value;\n                updateCache(this);\n            }\n        }\n    }\n\n    static getInstance() {\n        if (!AppStore.instance) {\n            AppStore.instance = new AppStore();\n        }\n\n        return AppStore.instance;\n    }\n\n    getItem(name) {\n        return localStorage.getItem(name);\n    }\n\n    removeItem(name) {\n        localStorage.removeItem(name);\n        const localData = this.localData;\n        if (localData) {\n            localData[name] = null;\n            delete localData[name];\n            updateCache(this);\n        }\n    }\n}\n\nexport default AppStore.getInstance();\n","import events from './events';\nimport appStorage from './appStorage';\n\n/** Report rate limits in ms for different events */\nconst reportRateLimits = {\n    timeupdate: 10000,\n    volumechange: 3000\n};\n\nfunction redetectBitrate(instance) {\n    stopBitrateDetection(instance);\n\n    if (instance.accessToken() && instance.enableAutomaticBitrateDetection !== false) {\n        setTimeout(redetectBitrateInternal.bind(instance), 6000);\n    }\n}\n\nfunction redetectBitrateInternal() {\n    if (this.accessToken()) {\n        this.detectBitrate();\n    }\n}\n\nfunction stopBitrateDetection(instance) {\n    if (instance.detectTimeout) {\n        clearTimeout(instance.detectTimeout);\n    }\n}\n\nfunction replaceAll(originalString, strReplace, strWith) {\n    const reg = new RegExp(strReplace, 'ig');\n    return originalString.replace(reg, strWith);\n}\n\nfunction onFetchFail(instance, url, response) {\n    events.trigger(instance, 'requestfail', [\n        {\n            url,\n            status: response.status,\n            errorCode: response.headers ? response.headers.get('X-Application-Error-Code') : null\n        }\n    ]);\n}\n\nfunction paramsToString(params) {\n    const values = [];\n\n    for (const key in params) {\n        const value = params[key];\n\n        if (value !== null && value !== undefined && value !== '') {\n            values.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return values.join('&');\n}\n\nfunction fetchWithTimeout(url, options, timeoutMs) {\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(reject, timeoutMs);\n\n        options = options || {};\n        options.credentials = 'same-origin';\n\n        fetch(url, options)\n            .then((response) => {\n                clearTimeout(timeout);\n                resolve(response);\n            })\n            .catch((error) => {\n                clearTimeout(timeout);\n                reject(error);\n            });\n    });\n}\n\nfunction getFetchPromise(request) {\n    const headers = request.headers || {};\n\n    if (request.dataType === 'json') {\n        headers.accept = 'application/json';\n    }\n\n    const fetchRequest = {\n        headers,\n        method: request.type,\n        credentials: 'same-origin'\n    };\n\n    let contentType = request.contentType;\n\n    if (request.data) {\n        if (typeof request.data === 'string') {\n            fetchRequest.body = request.data;\n        } else {\n            fetchRequest.body = paramsToString(request.data);\n\n            contentType = contentType || 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n    }\n\n    if (contentType) {\n        headers['Content-Type'] = contentType;\n    }\n\n    if (!request.timeout) {\n        return fetch(request.url, fetchRequest);\n    }\n\n    return fetchWithTimeout(request.url, fetchRequest, request.timeout);\n}\n\nfunction cancelReportPlaybackProgressPromise(instance) {\n    if (typeof instance.reportPlaybackProgressCancel === 'function') instance.reportPlaybackProgressCancel();\n}\n\n/**\n * Creates a new api client instance\n * @param {String} serverAddress\n * @param {String} appName\n * @param {String} appVersion\n */\nclass ApiClient {\n    constructor(serverAddress, appName, appVersion, deviceName, deviceId) {\n        if (!serverAddress) {\n            throw new Error('Must supply a serverAddress');\n        }\n\n        console.debug(`ApiClient serverAddress: ${serverAddress}`);\n        console.debug(`ApiClient appName: ${appName}`);\n        console.debug(`ApiClient appVersion: ${appVersion}`);\n        console.debug(`ApiClient deviceName: ${deviceName}`);\n        console.debug(`ApiClient deviceId: ${deviceId}`);\n\n        this._serverInfo = {};\n        this._serverAddress = serverAddress;\n        this._deviceId = deviceId;\n        this._deviceName = deviceName;\n        this._appName = appName;\n        this._appVersion = appVersion;\n        this._loggedIn = false;\n    }\n\n    appName() {\n        return this._appName;\n    }\n\n    setRequestHeaders(headers) {\n        const currentServerInfo = this.serverInfo();\n        const appName = this._appName;\n        const accessToken = currentServerInfo.AccessToken;\n\n        const values = [];\n\n        if (appName) {\n            values.push(`Client=\"${appName}\"`);\n        }\n\n        if (this._deviceName) {\n            values.push(`Device=\"${this._deviceName}\"`);\n        }\n\n        if (this._deviceId) {\n            values.push(`DeviceId=\"${this._deviceId}\"`);\n        }\n\n        if (this._appVersion) {\n            values.push(`Version=\"${this._appVersion}\"`);\n        }\n\n        if (accessToken) {\n            values.push(`Token=\"${accessToken}\"`);\n        }\n\n        if (values.length) {\n            const auth = `MediaBrowser ${values.join(', ')}`;\n            //headers.Authorization = auth;\n            headers['X-Emby-Authorization'] = auth;\n        }\n    }\n\n    appVersion() {\n        return this._appVersion;\n    }\n\n    deviceName() {\n        return this._deviceName;\n    }\n\n    deviceId() {\n        return this._deviceId;\n    }\n\n    /**\n     * Gets the server address.\n     */\n    serverAddress(val) {\n        if (val != null) {\n            if (val.toLowerCase().indexOf('http') !== 0) {\n                throw new Error(`Invalid url: ${val}`);\n            }\n\n            const changed = val !== this._serverAddress;\n\n            this._serverAddress = val;\n\n            this.onNetworkChange();\n\n            if (changed) {\n                events.trigger(this, 'serveraddresschanged');\n            }\n        }\n\n        return this._serverAddress;\n    }\n\n    onNetworkChange() {\n        this.lastDetectedBitrate = 0;\n        this.lastDetectedBitrateTime = 0;\n        setSavedEndpointInfo(this, null);\n\n        redetectBitrate(this);\n    }\n\n    /**\n     * Creates an api url based on a handler name and query string parameters\n     * @param {String} name\n     * @param {Object} params\n     */\n    getUrl(name, params, serverAddress) {\n        if (!name) {\n            throw new Error('Url name cannot be empty');\n        }\n\n        let url = serverAddress || this._serverAddress;\n\n        if (!url) {\n            throw new Error('serverAddress is yet not set');\n        }\n\n        if (name.charAt(0) !== '/') {\n            url += '/';\n        }\n\n        url += name;\n\n        if (params) {\n            params = paramsToString(params);\n            if (params) {\n                url += `?${params}`;\n            }\n        }\n\n        return url;\n    }\n\n    fetchWithFailover(request, enableReconnection) {\n        console.log(`Requesting ${request.url}`);\n\n        request.timeout = 30000;\n        const instance = this;\n\n        return getFetchPromise(request)\n            .then((response) => {\n                instance.lastFetch = new Date().getTime();\n\n                if (response.status < 400) {\n                    if (request.dataType === 'json' || request.headers.accept === 'application/json') {\n                        return response.json();\n                    } else if (\n                        request.dataType === 'text' ||\n                        (response.headers.get('Content-Type') || '').toLowerCase().indexOf('text/') === 0\n                    ) {\n                        return response.text();\n                    } else {\n                        return response;\n                    }\n                } else {\n                    onFetchFail(instance, request.url, response);\n                    return Promise.reject(response);\n                }\n            })\n            .catch((error) => {\n                if (error) {\n                    console.log(`Request failed to ${request.url} ${error.toString()}`);\n                } else {\n                    console.log(`Request timed out to ${request.url}`);\n                }\n\n                // http://api.jquery.com/jQuery.ajax/\n                if ((!error || !error.status) && enableReconnection) {\n                    console.log('Attempting reconnection');\n\n                    const previousServerAddress = instance.serverAddress();\n\n                    return tryReconnect(instance)\n                        .then(() => {\n                            console.log('Reconnect succeeded');\n                            request.url = request.url.replace(previousServerAddress, instance.serverAddress());\n\n                            return instance.fetchWithFailover(request, false);\n                        })\n                        .catch((innerError) => {\n                            console.log('Reconnect failed');\n                            onFetchFail(instance, request.url, {});\n                            throw innerError;\n                        });\n                } else {\n                    console.log('Reporting request failure');\n\n                    onFetchFail(instance, request.url, {});\n                    throw error;\n                }\n            });\n    }\n\n    /**\n     * Wraps around jQuery ajax methods to add additional info to the request.\n     */\n    fetch(request, includeAuthorization) {\n        if (!request) {\n            return Promise.reject('Request cannot be null');\n        }\n\n        request.headers = request.headers || {};\n\n        if (includeAuthorization !== false) {\n            this.setRequestHeaders(request.headers);\n        }\n\n        if (this.enableAutomaticNetworking === false || request.type !== 'GET') {\n            console.log(`Requesting url without automatic networking: ${request.url}`);\n\n            const instance = this;\n            return getFetchPromise(request)\n                .then((response) => {\n                    instance.lastFetch = new Date().getTime();\n\n                    if (response.status < 400) {\n                        if (request.dataType === 'json' || request.headers.accept === 'application/json') {\n                            return response.json();\n                        } else if (\n                            request.dataType === 'text' ||\n                            (response.headers.get('Content-Type') || '').toLowerCase().indexOf('text/') === 0\n                        ) {\n                            return response.text();\n                        } else {\n                            return response;\n                        }\n                    } else {\n                        onFetchFail(instance, request.url, response);\n                        return Promise.reject(response);\n                    }\n                })\n                .catch((error) => {\n                    onFetchFail(instance, request.url, {});\n                    return Promise.reject(error);\n                });\n        }\n\n        return this.fetchWithFailover(request, true);\n    }\n\n    setAuthenticationInfo(accessKey, userId) {\n        this._currentUser = null;\n\n        this._loggedIn = !!userId && !!accessKey;\n\n        this._serverInfo.AccessToken = accessKey;\n        this._serverInfo.UserId = userId;\n        redetectBitrate(this);\n    }\n\n    serverInfo(info) {\n        if (info) {\n            this._serverInfo = info;\n        }\n\n        return this._serverInfo;\n    }\n\n    /**\n     * Gets or sets the current user id.\n     */\n    getCurrentUserId() {\n        if (!this._loggedIn) return null;\n        return this._serverInfo.UserId;\n    }\n\n    accessToken() {\n        if (!this._loggedIn) return null;\n        return this._serverInfo.AccessToken;\n    }\n\n    serverId() {\n        return this.serverInfo().Id;\n    }\n\n    serverName() {\n        return this.serverInfo().Name;\n    }\n\n    /**\n     * Wraps around jQuery ajax methods to add additional info to the request.\n     */\n    ajax(request, includeAuthorization) {\n        if (!request) {\n            return Promise.reject('Request cannot be null');\n        }\n\n        return this.fetch(request, includeAuthorization);\n    }\n\n    /**\n     * Gets or sets the current user id.\n     */\n    getCurrentUser(enableCache) {\n        if (this._currentUser) {\n            return Promise.resolve(this._currentUser);\n        }\n\n        const userId = this.getCurrentUserId();\n\n        if (!userId) {\n            return Promise.reject();\n        }\n\n        const instance = this;\n        let user;\n\n        const serverPromise = this.getUser(userId)\n            .then((userObject) => {\n                appStorage.setItem(`user-${userObject.Id}-${userObject.ServerId}`, JSON.stringify(userObject));\n\n                instance._currentUser = userObject;\n                return userObject;\n            })\n            .catch((response) => {\n                // if timed out, look for cached value\n                if (!response.status) {\n                    if (userId && instance.accessToken()) {\n                        user = getCachedUser(instance, userId);\n                        if (user) {\n                            return Promise.resolve(user);\n                        }\n                    }\n                }\n\n                throw response;\n            });\n\n        if (!this.lastFetch && enableCache !== false) {\n            user = getCachedUser(instance, userId);\n            if (user) {\n                return Promise.resolve(user);\n            }\n        }\n\n        return serverPromise;\n    }\n\n    isLoggedIn() {\n        return this._loggedIn;\n    }\n\n    /**\n     * Logout current user\n     */\n    logout() {\n        stopBitrateDetection(this);\n        this.closeWebSocket();\n\n        const done = () => {\n            const info = this.serverInfo();\n            if (info && info.UserId && info.Id) {\n                appStorage.removeItem(`user-${info.UserId}-${info.Id}`);\n            }\n            this.setAuthenticationInfo(null, null);\n        };\n\n        if (this.accessToken()) {\n            const url = this.getUrl('Sessions/Logout');\n\n            return this.ajax({\n                type: 'POST',\n                url\n            }).then(done, done);\n        }\n\n        done();\n        return Promise.resolve();\n    }\n\n    /**\n     * Authenticates a user\n     * @param {String} name\n     * @param {String} password\n     */\n    authenticateUserByName(name, password) {\n        if (!name) {\n            return Promise.reject();\n        }\n\n        const url = this.getUrl('Users/authenticatebyname');\n\n        return new Promise((resolve, reject) => {\n            const postData = {\n                Username: name,\n                Pw: password || ''\n            };\n\n            this.ajax({\n                type: 'POST',\n                url: url,\n                data: JSON.stringify(postData),\n                dataType: 'json',\n                contentType: 'application/json'\n            })\n                .then((result) => {\n                    const afterOnAuthenticated = () => {\n                        redetectBitrate(this);\n                        resolve(result);\n                    };\n\n                    if (this.onAuthenticated) {\n                        this.onAuthenticated(this, result).then(afterOnAuthenticated);\n                    } else {\n                        afterOnAuthenticated();\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Authenticates a user using quick connect\n     * @param {String} secret The secret from the request.\n     */\n    quickConnect(secret) {\n        if (!secret) {\n            return Promise.reject();\n        }\n\n        const url = this.getUrl('Users/AuthenticateWithQuickConnect');\n\n        return new Promise((resolve, reject) => {\n            const postData = {\n                Secret: secret\n            };\n\n            this.ajax({\n                type: 'POST',\n                url: url,\n                data: JSON.stringify(postData),\n                dataType: 'json',\n                contentType: 'application/json'\n            })\n                .then((result) => {\n                    const afterOnAuthenticated = () => {\n                        redetectBitrate(this);\n                        resolve(result);\n                    };\n\n                    if (this.onAuthenticated) {\n                        this.onAuthenticated(this, result).then(afterOnAuthenticated);\n                    } else {\n                        afterOnAuthenticated();\n                    }\n                })\n                .catch(() => {\n                    throw new Error('quickConnect: error authenticating with the server');\n                });\n        });\n    }\n\n    /**\n     * Retrieves quick connect information for the provided verb\n     * @param {String} verb\n     */\n    getQuickConnect(verb) {\n        var url = this.getUrl(\"/QuickConnect/\" + verb);\n        return this.getJSON(url);\n    }\n\n    ensureWebSocket() {\n        if (this.isWebSocketOpenOrConnecting() || !this.isWebSocketSupported()) {\n            return;\n        }\n\n        try {\n            this.openWebSocket();\n        } catch (err) {\n            console.log(`Error opening web socket: ${err}`);\n        }\n    }\n\n    openWebSocket() {\n        const accessToken = this.accessToken();\n\n        if (!accessToken) {\n            throw new Error('Cannot open web socket without access token.');\n        }\n\n        let url = this.getUrl('socket');\n\n        url = replaceAll(url, 'emby/socket', 'embywebsocket');\n        url = replaceAll(url, 'https:', 'wss:');\n        url = replaceAll(url, 'http:', 'ws:');\n\n        url += `?api_key=${accessToken}`;\n        url += `&deviceId=${this.deviceId()}`;\n\n        console.log(`opening web socket with url: ${url}`);\n\n        const webSocket = new WebSocket(url);\n\n        webSocket.onmessage = onWebSocketMessage.bind(this);\n        webSocket.onopen = onWebSocketOpen.bind(this);\n        webSocket.onerror = onWebSocketError.bind(this);\n        setSocketOnClose(this, webSocket);\n\n        this._webSocket = webSocket;\n    }\n\n    closeWebSocket() {\n        const socket = this._webSocket;\n\n        if (socket && socket.readyState === WebSocket.OPEN) {\n            socket.close();\n        }\n    }\n\n    sendWebSocketMessage(name, data) {\n        console.log(`Sending web socket message: ${name}`);\n\n        let msg = { MessageType: name };\n\n        if (data) {\n            msg.Data = data;\n        }\n\n        msg = JSON.stringify(msg);\n\n        this._webSocket.send(msg);\n    }\n\n    sendMessage(name, data) {\n        if (this.isWebSocketOpen()) {\n            this.sendWebSocketMessage(name, data);\n        }\n    }\n\n    isMessageChannelOpen() {\n        return this.isWebSocketOpen();\n    }\n\n    isWebSocketOpen() {\n        const socket = this._webSocket;\n\n        if (socket) {\n            return socket.readyState === WebSocket.OPEN;\n        }\n        return false;\n    }\n\n    isWebSocketOpenOrConnecting() {\n        const socket = this._webSocket;\n\n        if (socket) {\n            return socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING;\n        }\n        return false;\n    }\n\n    get(url) {\n        return this.ajax({\n            type: 'GET',\n            url\n        });\n    }\n\n    getJSON(url, includeAuthorization) {\n        return this.fetch(\n            {\n                url,\n                type: 'GET',\n                dataType: 'json',\n                headers: {\n                    accept: 'application/json'\n                }\n            },\n            includeAuthorization\n        );\n    }\n\n    updateServerInfo(server, serverUrl) {\n        if (server == null) {\n            throw new Error('server cannot be null');\n        }\n\n        this.serverInfo(server);\n\n        if (!serverUrl) {\n            throw new Error(`serverUrl cannot be null. serverInfo: ${JSON.stringify(server)}`);\n        }\n        console.log(`Setting server address to ${serverUrl}`);\n        this.serverAddress(serverUrl);\n    }\n\n    isWebSocketSupported() {\n        try {\n            return WebSocket != null;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    clearAuthenticationInfo() {\n        this.setAuthenticationInfo(null, null);\n    }\n\n    encodeName(name) {\n        name = name.split('/').join('-');\n        name = name.split('&').join('-');\n        name = name.split('?').join('-');\n\n        const val = paramsToString({ name });\n        return val.substring(val.indexOf('=') + 1).replace(\"'\", '%27');\n    }\n\n    /**\n     * Gets the server time as a UTC formatted string.\n     * @returns {Promise} Promise that it's fulfilled on request completion.\n     * @since 10.6.0\n     */\n    getServerTime() {\n        const url = this.getUrl('GetUTCTime');\n\n        return this.ajax({\n            type: 'GET',\n            url: url\n        });\n    }\n\n    getDownloadSpeed(byteSize) {\n        const url = this.getUrl('Playback/BitrateTest', {\n            Size: byteSize\n        });\n\n        const now = new Date().getTime();\n\n        return this.ajax({\n            type: 'GET',\n            url,\n            timeout: 5000\n        }).then(() => {\n            const responseTimeSeconds = (new Date().getTime() - now) / 1000;\n            const bytesPerSecond = byteSize / responseTimeSeconds;\n            const bitrate = Math.round(bytesPerSecond * 8);\n\n            return bitrate;\n        });\n    }\n\n    detectBitrate(force) {\n        if (\n            !force &&\n            this.lastDetectedBitrate &&\n            new Date().getTime() - (this.lastDetectedBitrateTime || 0) <= 3600000\n        ) {\n            return Promise.resolve(this.lastDetectedBitrate);\n        }\n\n        const instance = this;\n\n        return this.getEndpointInfo().then(\n            (info) => detectBitrateWithEndpointInfo(instance, info),\n            (info) => detectBitrateWithEndpointInfo(instance, {})\n        );\n    }\n\n    /**\n     * Gets an item from the server\n     * Omit itemId to get the root folder.\n     */\n    getItem(userId, itemId) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = userId ? this.getUrl(`Users/${userId}/Items/${itemId}`) : this.getUrl(`Items/${itemId}`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the root folder from the server\n     */\n    getRootFolder(userId) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/Root`);\n\n        return this.getJSON(url);\n    }\n\n    getNotificationSummary(userId) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        const url = this.getUrl(`Notifications/${userId}/Summary`);\n\n        return this.getJSON(url);\n    }\n\n    getNotifications(userId, options) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        const url = this.getUrl(`Notifications/${userId}`, options || {});\n\n        return this.getJSON(url);\n    }\n\n    markNotificationsRead(userId, idList, isRead) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        if (!idList) {\n            throw new Error('null idList');\n        }\n\n        const suffix = isRead ? 'Read' : 'Unread';\n\n        const params = {\n            UserId: userId,\n            Ids: idList.join(',')\n        };\n\n        const url = this.getUrl(`Notifications/${userId}/${suffix}`, params);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    getRemoteImageProviders(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        const urlPrefix = getRemoteImagePrefix(this, options);\n\n        const url = this.getUrl(`${urlPrefix}/RemoteImages/Providers`, options);\n\n        return this.getJSON(url);\n    }\n\n    getAvailableRemoteImages(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        const urlPrefix = getRemoteImagePrefix(this, options);\n\n        const url = this.getUrl(`${urlPrefix}/RemoteImages`, options);\n\n        return this.getJSON(url);\n    }\n\n    downloadRemoteImage(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        const urlPrefix = getRemoteImagePrefix(this, options);\n\n        const url = this.getUrl(`${urlPrefix}/RemoteImages/Download`, options);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    getRecordingFolders(userId) {\n        const url = this.getUrl('LiveTv/Recordings/Folders', { userId: userId });\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvInfo(options) {\n        const url = this.getUrl('LiveTv/Info', options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvGuideInfo(options) {\n        const url = this.getUrl('LiveTv/GuideInfo', options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvChannel(id, userId) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`LiveTv/Channels/${id}`, options);\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvChannels(options) {\n        const url = this.getUrl('LiveTv/Channels', options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvPrograms(options = {}) {\n        if (options.channelIds && options.channelIds.length > 1800) {\n            return this.ajax({\n                type: 'POST',\n                url: this.getUrl('LiveTv/Programs'),\n                data: JSON.stringify(options),\n                contentType: 'application/json',\n                dataType: 'json'\n            });\n        } else {\n            return this.ajax({\n                type: 'GET',\n                url: this.getUrl('LiveTv/Programs', options),\n                dataType: 'json'\n            });\n        }\n    }\n\n    getLiveTvRecommendedPrograms(options = {}) {\n        return this.ajax({\n            type: 'GET',\n            url: this.getUrl('LiveTv/Programs/Recommended', options),\n            dataType: 'json'\n        });\n    }\n\n    getLiveTvRecordings(options) {\n        const url = this.getUrl('LiveTv/Recordings', options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvRecordingSeries(options) {\n        const url = this.getUrl('LiveTv/Recordings/Series', options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvRecordingGroups(options) {\n        const url = this.getUrl('LiveTv/Recordings/Groups', options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvRecordingGroup(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`LiveTv/Recordings/Groups/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvRecording(id, userId) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`LiveTv/Recordings/${id}`, options);\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvProgram(id, userId) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`LiveTv/Programs/${id}`, options);\n\n        return this.getJSON(url);\n    }\n\n    deleteLiveTvRecording(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`LiveTv/Recordings/${id}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    cancelLiveTvTimer(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`LiveTv/Timers/${id}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    getLiveTvTimers(options) {\n        const url = this.getUrl('LiveTv/Timers', options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvTimer(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`LiveTv/Timers/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    getNewLiveTvTimerDefaults(options = {}) {\n        const url = this.getUrl('LiveTv/Timers/Defaults', options);\n\n        return this.getJSON(url);\n    }\n\n    createLiveTvTimer(item) {\n        if (!item) {\n            throw new Error('null item');\n        }\n\n        const url = this.getUrl('LiveTv/Timers');\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(item),\n            contentType: 'application/json'\n        });\n    }\n\n    updateLiveTvTimer(item) {\n        if (!item) {\n            throw new Error('null item');\n        }\n\n        const url = this.getUrl(`LiveTv/Timers/${item.Id}`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(item),\n            contentType: 'application/json'\n        });\n    }\n\n    resetLiveTvTuner(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`LiveTv/Tuners/${id}/Reset`);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    getLiveTvSeriesTimers(options) {\n        const url = this.getUrl('LiveTv/SeriesTimers', options || {});\n\n        return this.getJSON(url);\n    }\n\n    getLiveTvSeriesTimer(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`LiveTv/SeriesTimers/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    cancelLiveTvSeriesTimer(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`LiveTv/SeriesTimers/${id}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    createLiveTvSeriesTimer(item) {\n        if (!item) {\n            throw new Error('null item');\n        }\n\n        const url = this.getUrl('LiveTv/SeriesTimers');\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(item),\n            contentType: 'application/json'\n        });\n    }\n\n    updateLiveTvSeriesTimer(item) {\n        if (!item) {\n            throw new Error('null item');\n        }\n\n        const url = this.getUrl(`LiveTv/SeriesTimers/${item.Id}`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(item),\n            contentType: 'application/json'\n        });\n    }\n\n    getRegistrationInfo(feature) {\n        const url = this.getUrl(`Registrations/${feature}`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the current server status\n     */\n    getSystemInfo(itemId) {\n        const url = this.getUrl('System/Info');\n\n        const instance = this;\n\n        return this.getJSON(url).then((info) => {\n            instance.setSystemInfo(info);\n            return Promise.resolve(info);\n        });\n    }\n\n    getSyncStatus() {\n        const url = this.getUrl('Sync/' + itemId + '/Status');\n\n        return this.ajax({\n            url: url,\n            type: 'POST',\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({\n                TargetId: this.deviceId()\n            })\n        });\n    }\n\n    /**\n     * Gets the current server status\n     */\n    getPublicSystemInfo() {\n        const url = this.getUrl('System/Info/Public');\n\n        const instance = this;\n\n        return this.getJSON(url).then((info) => {\n            instance.setSystemInfo(info);\n            return Promise.resolve(info);\n        });\n    }\n\n    getInstantMixFromItem(itemId, options) {\n        const url = this.getUrl(`Items/${itemId}/InstantMix`, options);\n\n        return this.getJSON(url);\n    }\n\n    getEpisodes(itemId, options) {\n        const url = this.getUrl(`Shows/${itemId}/Episodes`, options);\n\n        return this.getJSON(url);\n    }\n\n    getDisplayPreferences(id, userId, app) {\n        const url = this.getUrl(`DisplayPreferences/${id}`, {\n            userId,\n            client: app\n        });\n\n        return this.getJSON(url);\n    }\n\n    updateDisplayPreferences(id, obj, userId, app) {\n        const url = this.getUrl(`DisplayPreferences/${id}`, {\n            userId,\n            client: app\n        });\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(obj),\n            contentType: 'application/json'\n        });\n    }\n\n    getSeasons(itemId, options) {\n        const url = this.getUrl(`Shows/${itemId}/Seasons`, options);\n\n        return this.getJSON(url);\n    }\n\n    getSimilarItems(itemId, options) {\n        const url = this.getUrl(`Items/${itemId}/Similar`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets all cultures known to the server\n     */\n    getCultures() {\n        const url = this.getUrl('Localization/cultures');\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets all countries known to the server\n     */\n    getCountries() {\n        const url = this.getUrl('Localization/countries');\n\n        return this.getJSON(url);\n    }\n\n    getPlaybackInfo(itemId, options, deviceProfile) {\n        const postData = {\n            DeviceProfile: deviceProfile\n        };\n\n        return this.ajax({\n            url: this.getUrl(`Items/${itemId}/PlaybackInfo`, options),\n            type: 'POST',\n            data: JSON.stringify(postData),\n            contentType: 'application/json',\n            dataType: 'json'\n        });\n    }\n\n    getLiveStreamMediaInfo(liveStreamId) {\n        const postData = {\n            LiveStreamId: liveStreamId\n        };\n\n        return this.ajax({\n            url: this.getUrl('LiveStreams/MediaInfo'),\n            type: 'POST',\n            data: JSON.stringify(postData),\n            contentType: 'application/json',\n            dataType: 'json'\n        });\n    }\n\n    getIntros(itemId) {\n        return this.getJSON(this.getUrl(`Users/${this.getCurrentUserId()}/Items/${itemId}/Intros`));\n    }\n\n    /**\n     * Gets the directory contents of a path on the server\n     */\n    getDirectoryContents(path, options) {\n        if (!path) {\n            throw new Error('null path');\n        }\n        if (typeof path !== 'string') {\n            throw new Error('invalid path');\n        }\n\n        options = options || {};\n\n        options.path = path;\n\n        const url = this.getUrl('Environment/DirectoryContents', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets shares from a network device\n     */\n    getNetworkShares(path) {\n        if (!path) {\n            throw new Error('null path');\n        }\n\n        const options = {};\n        options.path = path;\n\n        const url = this.getUrl('Environment/NetworkShares', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the parent of a given path\n     */\n    getParentPath(path) {\n        if (!path) {\n            throw new Error('null path');\n        }\n\n        const options = {};\n        options.path = path;\n\n        const url = this.getUrl('Environment/ParentPath', options);\n\n        return this.ajax({\n            type: 'GET',\n            url,\n            dataType: 'text'\n        });\n    }\n\n    /**\n     * Gets a list of physical drives from the server\n     */\n    getDrives() {\n        const url = this.getUrl('Environment/Drives');\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a list of network devices from the server\n     */\n    getNetworkDevices() {\n        const url = this.getUrl('Environment/NetworkDevices');\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Cancels a package installation\n     */\n    cancelPackageInstallation(installationId) {\n        if (!installationId) {\n            throw new Error('null installationId');\n        }\n\n        const url = this.getUrl(`Packages/Installing/${installationId}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Refreshes metadata for an item\n     */\n    refreshItem(itemId, options) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Items/${itemId}/Refresh`, options || {});\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Installs or updates a new plugin\n     */\n    installPlugin(name, guid, version) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        const options = {\n            AssemblyGuid: guid\n        };\n\n        if (version) {\n            options.version = version;\n        }\n\n        const url = this.getUrl(`Packages/Installed/${name}`, options);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Instructs the server to perform a restart.\n     */\n    restartServer() {\n        const url = this.getUrl('System/Restart');\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Instructs the server to perform a shutdown.\n     */\n    shutdownServer() {\n        const url = this.getUrl('System/Shutdown');\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Gets information about an installable package\n     */\n    getPackageInfo(name, guid) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        const options = {\n            AssemblyGuid: guid\n        };\n\n        const url = this.getUrl(`Packages/${name}`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the virtual folder list\n     */\n    getVirtualFolders() {\n        let url = 'Library/VirtualFolders';\n\n        url = this.getUrl(url);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets all the paths of the locations in the physical root.\n     */\n    getPhysicalPaths() {\n        const url = this.getUrl('Library/PhysicalPaths');\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the current server configuration\n     */\n    getServerConfiguration() {\n        const url = this.getUrl('System/Configuration');\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the current server configuration\n     */\n    getDevicesOptions() {\n        const url = this.getUrl('System/Configuration/devices');\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Deletes the device from the devices list, forcing any active sessions\n     * to re-authenticate.\n     * @param {String} deviceId\n     */\n    deleteDevice(deviceId) {\n        const url = this.getUrl('Devices', {\n            Id: deviceId\n        });\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Gets the current server configuration\n     */\n    getContentUploadHistory() {\n        const url = this.getUrl('Devices/CameraUploads', {\n            DeviceId: this.deviceId()\n        });\n\n        return this.getJSON(url);\n    }\n\n    getNamedConfiguration(name) {\n        const url = this.getUrl(`System/Configuration/${name}`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets the server's scheduled tasks\n     */\n    getScheduledTasks(options = {}) {\n        const url = this.getUrl('ScheduledTasks', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Starts a scheduled task\n     */\n    startScheduledTask(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`ScheduledTasks/Running/${id}`);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Gets a scheduled task\n     */\n    getScheduledTask(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`ScheduledTasks/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    getNextUpEpisodes(options) {\n        const url = this.getUrl('Shows/NextUp', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Stops a scheduled task\n     */\n    stopScheduledTask(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`ScheduledTasks/Running/${id}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Gets the configuration of a plugin\n     * @param {String} Id\n     */\n    getPluginConfiguration(id) {\n        if (!id) {\n            throw new Error('null Id');\n        }\n\n        const url = this.getUrl(`Plugins/${id}/Configuration`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a list of plugins that are available to be installed\n     */\n    getAvailablePlugins(options = {}) {\n        options.PackageType = 'UserInstalled';\n\n        const url = this.getUrl('Packages', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Uninstalls a plugin\n     * @param {String} Id\n     */\n    uninstallPlugin(id) {\n        if (!id) {\n            throw new Error('null Id');\n        }\n\n        const url = this.getUrl(`Plugins/${id}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Uninstalls a plugin\n     * @param {String} Id\n     * @param {String} Version\n     */\n    uninstallPluginByVersion(id, version) {\n        if (!id) {\n            throw new Error('null Id');\n        }\n\n        if (!version) {\n            throw new Error('null Version');\n        }\n\n        const url = this.getUrl(`Plugins/${id}/${version}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Enables a plugin\n     * @param {String} Id\n     * @param {String} Version\n     */\n    enablePlugin(id, version) {\n        if (!id) {\n            throw new Error('null Id');\n        }\n\n        if (!version) {\n            throw new Error('null Id');\n        }\n\n        const url = this.getUrl(`Plugins/${id}/${version}/Enable`);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Disables a plugin\n     * @param {String} Id\n     * @param {String} Version\n     */\n    disablePlugin(id, version) {\n        if (!id) {\n            throw new Error('null Id');\n        }\n\n        if (!version) {\n            throw new Error('null Version');\n        }\n\n        const url = this.getUrl(`Plugins/${id}/${version}/Disable`);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Removes a virtual folder\n     * @param {String} name\n     */\n    removeVirtualFolder(name, refreshLibrary) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        let url = 'Library/VirtualFolders';\n\n        url = this.getUrl(url, {\n            refreshLibrary: refreshLibrary ? true : false,\n            name\n        });\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Adds a virtual folder\n     * @param {String} name\n     */\n    addVirtualFolder(name, type, refreshLibrary, libraryOptions) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        const options = {};\n\n        if (type) {\n            options.collectionType = type;\n        }\n\n        options.refreshLibrary = refreshLibrary ? true : false;\n        options.name = name;\n\n        let url = 'Library/VirtualFolders';\n\n        url = this.getUrl(url, options);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify({\n                LibraryOptions: libraryOptions\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    updateVirtualFolderOptions(id, libraryOptions) {\n        if (!id) {\n            throw new Error('null name');\n        }\n\n        let url = 'Library/VirtualFolders/LibraryOptions';\n\n        url = this.getUrl(url);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify({\n                Id: id,\n                LibraryOptions: libraryOptions\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Renames a virtual folder\n     * @param {String} name\n     */\n    renameVirtualFolder(name, newName, refreshLibrary) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        let url = 'Library/VirtualFolders/Name';\n\n        url = this.getUrl(url, {\n            refreshLibrary: refreshLibrary ? true : false,\n            newName,\n            name\n        });\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Adds an additional mediaPath to an existing virtual folder\n     * @param {String} name\n     */\n    addMediaPath(virtualFolderName, mediaPath, networkSharePath, refreshLibrary) {\n        if (!virtualFolderName) {\n            throw new Error('null virtualFolderName');\n        }\n\n        if (!mediaPath) {\n            throw new Error('null mediaPath');\n        }\n\n        let url = 'Library/VirtualFolders/Paths';\n\n        const pathInfo = {\n            Path: mediaPath\n        };\n        if (networkSharePath) {\n            pathInfo.NetworkPath = networkSharePath;\n        }\n\n        url = this.getUrl(url, {\n            refreshLibrary: refreshLibrary ? true : false\n        });\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify({\n                Name: virtualFolderName,\n                PathInfo: pathInfo\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    updateMediaPath(virtualFolderName, pathInfo) {\n        if (!virtualFolderName) {\n            throw new Error('null virtualFolderName');\n        }\n\n        if (!pathInfo) {\n            throw new Error('null pathInfo');\n        }\n\n        let url = 'Library/VirtualFolders/Paths/Update';\n\n        url = this.getUrl(url);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify({\n                Name: virtualFolderName,\n                PathInfo: pathInfo\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Removes a media path from a virtual folder\n     * @param {String} name\n     */\n    removeMediaPath(virtualFolderName, mediaPath, refreshLibrary) {\n        if (!virtualFolderName) {\n            throw new Error('null virtualFolderName');\n        }\n\n        if (!mediaPath) {\n            throw new Error('null mediaPath');\n        }\n\n        let url = 'Library/VirtualFolders/Paths';\n\n        url = this.getUrl(url, {\n            refreshLibrary: refreshLibrary ? true : false,\n            path: mediaPath,\n            name: virtualFolderName\n        });\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Deletes a user\n     * @param {String} id\n     */\n    deleteUser(id) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        const url = this.getUrl(`Users/${id}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Deletes a user image\n     * @param {String} userId\n     * @param {String} imageType The type of image to delete, based on the server-side ImageType enum.\n     */\n    deleteUserImage(userId, imageType, imageIndex) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        if (!imageType) {\n            throw new Error('null imageType');\n        }\n\n        let url = this.getUrl(`Users/${userId}/Images/${imageType}`);\n\n        if (imageIndex != null) {\n            url += `/${imageIndex}`;\n        }\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    deleteItemImage(itemId, imageType, imageIndex) {\n        if (!imageType) {\n            throw new Error('null imageType');\n        }\n\n        let url = this.getUrl(`Items/${itemId}/Images`);\n\n        url += `/${imageType}`;\n\n        if (imageIndex != null) {\n            url += `/${imageIndex}`;\n        }\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    deleteItem(itemId) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Items/${itemId}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    stopActiveEncodings(playSessionId) {\n        const options = {\n            deviceId: this.deviceId()\n        };\n\n        if (playSessionId) {\n            options.PlaySessionId = playSessionId;\n        }\n\n        const url = this.getUrl('Videos/ActiveEncodings', options);\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    reportCapabilities(options) {\n        const url = this.getUrl('Sessions/Capabilities/Full');\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    updateItemImageIndex(itemId, imageType, imageIndex, newIndex) {\n        if (!imageType) {\n            throw new Error('null imageType');\n        }\n\n        const options = { newIndex };\n\n        const url = this.getUrl(`Items/${itemId}/Images/${imageType}/${imageIndex}/Index`, options);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    getItemImageInfos(itemId) {\n        const url = this.getUrl(`Items/${itemId}/Images`);\n\n        return this.getJSON(url);\n    }\n\n    getCriticReviews(itemId, options) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Items/${itemId}/CriticReviews`, options);\n\n        return this.getJSON(url);\n    }\n\n    getItemDownloadUrl(itemId) {\n        if (!itemId) {\n            throw new Error('itemId cannot be empty');\n        }\n\n        const url = `Items/${itemId}/Download`;\n\n        return this.getUrl(url, {\n            api_key: this.accessToken()\n        });\n    }\n\n    getSessions(options) {\n        const url = this.getUrl('Sessions', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Uploads a user image\n     * @param {String} userId\n     * @param {String} imageType The type of image to delete, based on the server-side ImageType enum.\n     * @param {Object} file The file from the input element\n     */\n    uploadUserImage(userId, imageType, file) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        if (!imageType) {\n            throw new Error('null imageType');\n        }\n\n        if (!file) {\n            throw new Error('File must be an image.');\n        }\n\n        if (!file.type.startsWith('image/')) {\n            throw new Error('File must be an image.');\n        }\n\n        const instance = this;\n\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onerror = () => {\n                reject();\n            };\n\n            reader.onabort = () => {\n                reject();\n            };\n\n            // Closure to capture the file information.\n            reader.onload = (e) => {\n                // Split by a comma to remove the url: prefix\n                const data = e.target.result.split(',')[1];\n\n                const url = instance.getUrl(`Users/${userId}/Images/${imageType}`);\n\n                instance\n                    .ajax({\n                        type: 'POST',\n                        url,\n                        data,\n                        contentType: file.type\n                    })\n                    .then(resolve, reject);\n            };\n\n            // Read in the image file as a data URL.\n            reader.readAsDataURL(file);\n        });\n    }\n\n    uploadItemImage(itemId, imageType, file) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        if (!imageType) {\n            throw new Error('null imageType');\n        }\n\n        if (!file) {\n            throw new Error('File must be an image.');\n        }\n\n        if (!file.type.startsWith('image/')) {\n            throw new Error('File must be an image.');\n        }\n\n        let url = this.getUrl(`Items/${itemId}/Images`);\n\n        url += `/${imageType}`;\n        const instance = this;\n\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onerror = () => {\n                reject();\n            };\n\n            reader.onabort = () => {\n                reject();\n            };\n\n            // Closure to capture the file information.\n            reader.onload = (e) => {\n                // Split by a comma to remove the url: prefix\n                const data = e.target.result.split(',')[1];\n\n                instance\n                    .ajax({\n                        type: 'POST',\n                        url,\n                        data,\n                        contentType: file.type\n                    })\n                    .then(resolve, reject);\n            };\n\n            // Read in the image file as a data URL.\n            reader.readAsDataURL(file);\n        });\n    }\n\n    uploadItemSubtitle(itemId, language, isForced, file) {\n        if (!itemId) {\n            throw new SyntaxError('Missing itemId');\n        }\n\n        if (!language) {\n            throw new SyntaxError('Missing language');\n        }\n\n        if (typeof isForced !== 'boolean') {\n            throw new TypeError('Parameter isForced must be a boolean.');\n        }\n\n        if (!file) {\n            throw new SyntaxError('File must be a subtitle file.');\n        }\n\n        const format = file.name.substring(file.name.lastIndexOf('.') + 1).toLowerCase();\n\n        if (!['sub', 'srt', 'vtt', 'ass', 'ssa'].includes(format)) {\n            throw new Error('Invalid subtitle format.');\n        }\n\n        let url = this.getUrl(`Videos/${itemId}/Subtitles`);\n\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onerror = () => {\n                reject();\n            };\n\n            reader.onabort = () => {\n                reject();\n            };\n\n            // Closure to capture the file information.\n            reader.onload = (e) => {\n                // Split by a comma to remove the url: prefix\n                const data = e.target.result.split(',')[1];\n\n                this.ajax({\n                        type: 'POST',\n                        url,\n                        contentType: 'application/json',\n                        data: JSON.stringify({\n                            language: language,\n                            format: format,\n                            isForced: isForced,\n                            data: data\n                        })\n                    })\n                    .then(resolve, reject);\n            };\n\n            // Read in the image file as a data URL.\n            reader.readAsDataURL(file);\n        });\n    }\n\n    /**\n     * Gets the list of installed plugins on the server\n     */\n    getInstalledPlugins() {\n        const options = {};\n\n        const url = this.getUrl('Plugins', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a user by id\n     * @param {String} id\n     */\n    getUser(id) {\n        if (!id) {\n            throw new Error('Must supply a userId');\n        }\n\n        const url = this.getUrl(`Users/${id}`);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a studio\n     */\n    getStudio(name, userId) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Studios/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a genre\n     */\n    getGenre(name, userId) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Genres/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    getMusicGenre(name, userId) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`MusicGenres/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets an artist\n     */\n    getArtist(name, userId) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Artists/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets a Person\n     */\n    getPerson(name, userId) {\n        if (!name) {\n            throw new Error('null name');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Persons/${this.encodeName(name)}`, options);\n\n        return this.getJSON(url);\n    }\n\n    getPublicUsers() {\n        const url = this.getUrl('users/public');\n\n        return this.ajax(\n            {\n                type: 'GET',\n                url,\n                dataType: 'json'\n            },\n            false\n        );\n    }\n\n    /**\n     * Gets all users from the server\n     */\n    getUsers(options) {\n        const url = this.getUrl('users', options || {});\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets all available parental ratings from the server\n     */\n    getParentalRatings() {\n        const url = this.getUrl('Localization/ParentalRatings');\n\n        return this.getJSON(url);\n    }\n\n    getDefaultImageQuality(imageType) {\n        return imageType.toLowerCase() === 'backdrop' ? 80 : 90;\n    }\n\n    /**\n     * Constructs a url for a user image\n     * @param {String} userId\n     * @param {Object} options\n     * Options supports the following properties:\n     * width - download the image at a fixed width\n     * height - download the image at a fixed height\n     * maxWidth - download the image at a maxWidth (touch box on the inside)\n     * maxHeight - download the image at a maxHeight (touch box on the inside)\n     * fillWidth - scale the image down to fill a fillWidth wide box (touch box on the outside)\n     * fillHeight - scale the image down to fill a fillHeight high box (touch box on the outside)\n     * quality - A scale of 0-100. This should almost always be omitted as the default will suffice.\n     * For best results do not specify both width and height together, as aspect ratio might be altered.\n     */\n    getUserImageUrl(userId, options) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        options = options || {};\n\n        let url = `Users/${userId}/Images/${options.type}`;\n\n        if (options.index != null) {\n            url += `/${options.index}`;\n        }\n\n        normalizeImageOptions(this, options);\n\n        // Don't put these on the query string\n        delete options.type;\n        delete options.index;\n\n        return this.getUrl(url, options);\n    }\n\n    /**\n     * Constructs a url for an item image\n     * @param {String} itemId\n     * @param {Object} options\n     * Options supports the following properties:\n     * type - Primary, logo, backdrop, etc. See the server-side enum ImageType\n     * index - When downloading a backdrop, use this to specify which one (omitting is equivalent to zero)\n     * width - download the image at a fixed width\n     * height - download the image at a fixed height\n     * maxWidth - download the image at a maxWidth (touch box on the inside)\n     * maxHeight - download the image at a maxHeight (touch box on the inside)\n     * fillWidth - scale the image down to fill a fillWidth wide box (touch box on the outside)\n     * fillHeight - scale the image down to fill a fillHeight high box (touch box on the outside)\n     * quality - A scale of 0-100. This should almost always be omitted as the default will suffice.\n     * For best results do not specify both width and height together, as aspect ratio might be altered.\n     */\n    getImageUrl(itemId, options) {\n        if (!itemId) {\n            throw new Error('itemId cannot be empty');\n        }\n\n        options = options || {};\n\n        let url = `Items/${itemId}/Images/${options.type}`;\n\n        if (options.index != null) {\n            url += `/${options.index}`;\n        }\n\n        options.quality = options.quality || this.getDefaultImageQuality(options.type);\n\n        if (this.normalizeImageOptions) {\n            this.normalizeImageOptions(options);\n        }\n\n        // Don't put these on the query string\n        delete options.type;\n        delete options.index;\n\n        return this.getUrl(url, options);\n    }\n\n    getScaledImageUrl(itemId, options) {\n        if (!itemId) {\n            throw new Error('itemId cannot be empty');\n        }\n\n        options = options || {};\n\n        let url = `Items/${itemId}/Images/${options.type}`;\n\n        if (options.index != null) {\n            url += `/${options.index}`;\n        }\n\n        normalizeImageOptions(this, options);\n\n        // Don't put these on the query string\n        delete options.type;\n        delete options.index;\n        delete options.minScale;\n\n        return this.getUrl(url, options);\n    }\n\n    getThumbImageUrl(item, options) {\n        if (!item) {\n            throw new Error('null item');\n        }\n\n        options = options || {};\n\n        options.imageType = 'thumb';\n\n        if (item.ImageTags && item.ImageTags.Thumb) {\n            options.tag = item.ImageTags.Thumb;\n            return this.getImageUrl(item.Id, options);\n        } else if (item.ParentThumbItemId) {\n            options.tag = item.ImageTags.ParentThumbImageTag;\n            return this.getImageUrl(item.ParentThumbItemId, options);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Updates a user's password\n     * @param {String} userId\n     * @param {String} currentPassword\n     * @param {String} newPassword\n     */\n    updateUserPassword(userId, currentPassword, newPassword) {\n        if (!userId) {\n            return Promise.reject();\n        }\n\n        const url = this.getUrl(`Users/${userId}/Password`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify({\n                CurrentPw: currentPassword || '',\n                NewPw: newPassword\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Updates a user's easy password\n     * @param {String} userId\n     * @param {String} newPassword\n     */\n    updateEasyPassword(userId, newPassword) {\n        if (!userId) {\n            Promise.reject();\n            return;\n        }\n\n        const url = this.getUrl(`Users/${userId}/EasyPassword`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify({\n                NewPw: newPassword\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Resets a user's password\n     * @param {String} userId\n     */\n    resetUserPassword(userId) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/Password`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify({\n                resetPassword: true\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    resetEasyPassword(userId) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/EasyPassword`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify({\n                resetPassword: true\n            }),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Updates the server's configuration\n     * @param {Object} configuration\n     */\n    updateServerConfiguration(configuration) {\n        if (!configuration) {\n            throw new Error('null configuration');\n        }\n\n        const url = this.getUrl('System/Configuration');\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(configuration),\n            contentType: 'application/json'\n        });\n    }\n\n    updateNamedConfiguration(name, configuration) {\n        if (!configuration) {\n            throw new Error('null configuration');\n        }\n\n        const url = this.getUrl(`System/Configuration/${name}`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(configuration),\n            contentType: 'application/json'\n        });\n    }\n\n    updateItem(item) {\n        if (!item) {\n            throw new Error('null item');\n        }\n\n        const url = this.getUrl(`Items/${item.Id}`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(item),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Updates plugin security info\n     */\n    updatePluginSecurityInfo(info) {\n        const url = this.getUrl('Plugins/SecurityInfo');\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(info),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Creates a user\n     * @param {Object} user\n     */\n    createUser(user) {\n        const url = this.getUrl('Users/New');\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(user),\n            contentType: 'application/json',\n            headers: {\n                accept: 'application/json'\n            }\n        });\n    }\n\n    /**\n     * Updates a user\n     * @param {Object} user\n     */\n    updateUser(user) {\n        if (!user) {\n            throw new Error('null user');\n        }\n\n        const url = this.getUrl(`Users/${user.Id}`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(user),\n            contentType: 'application/json'\n        });\n    }\n\n    updateUserPolicy(userId, policy) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n        if (!policy) {\n            throw new Error('null policy');\n        }\n\n        const url = this.getUrl(`Users/${userId}/Policy`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(policy),\n            contentType: 'application/json'\n        });\n    }\n\n    updateUserConfiguration(userId, configuration) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n        if (!configuration) {\n            throw new Error('null configuration');\n        }\n\n        const url = this.getUrl(`Users/${userId}/Configuration`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(configuration),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Updates the Triggers for a ScheduledTask\n     * @param {String} id\n     * @param {Object} triggers\n     */\n    updateScheduledTaskTriggers(id, triggers) {\n        if (!id) {\n            throw new Error('null id');\n        }\n\n        if (!triggers) {\n            throw new Error('null triggers');\n        }\n\n        const url = this.getUrl(`ScheduledTasks/${id}/Triggers`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(triggers),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Updates a plugin's configuration\n     * @param {String} Id\n     * @param {Object} configuration\n     */\n    updatePluginConfiguration(id, configuration) {\n        if (!id) {\n            throw new Error('null Id');\n        }\n\n        if (!configuration) {\n            throw new Error('null configuration');\n        }\n\n        const url = this.getUrl(`Plugins/${id}/Configuration`);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            data: JSON.stringify(configuration),\n            contentType: 'application/json'\n        });\n    }\n\n    getAncestorItems(itemId, userId) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Items/${itemId}/Ancestors`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets items based on a query, typically for children of a folder\n     * @param {String} userId\n     * @param {Object} options\n     * Options accepts the following properties:\n     * itemId - Localize the search to a specific folder (root if omitted)\n     * startIndex - Use for paging\n     * limit - Use to limit results to a certain number of items\n     * filter - Specify one or more ItemFilters, comma delimeted (see server-side enum)\n     * sortBy - Specify an ItemSortBy (comma-delimeted list see server-side enum)\n     * sortOrder - ascending/descending\n     * fields - additional fields to include aside from basic info. This is a comma delimited list. See server-side enum ItemFields.\n     * index - the name of the dynamic, localized index function\n     * dynamicSortBy - the name of the dynamic localized sort function\n     * recursive - Whether or not the query should be recursive\n     * searchTerm - search term to use as a filter\n     */\n    getItems(userId, options) {\n        let url;\n\n        if ((typeof userId).toString().toLowerCase() === 'string') {\n            url = this.getUrl(`Users/${userId}/Items`, options);\n        } else {\n            url = this.getUrl('Items', options);\n        }\n\n        return this.getJSON(url);\n    }\n\n    getResumableItems(userId, options) {\n        if (this.isMinServerVersion('3.2.33')) {\n            return this.getJSON(this.getUrl(`Users/${userId}/Items/Resume`, options));\n        }\n\n        return this.getItems(\n            userId,\n            Object.assign(\n                {\n                    SortBy: 'DatePlayed',\n                    SortOrder: 'Descending',\n                    Filters: 'IsResumable',\n                    Recursive: true,\n                    CollapseBoxSetItems: false,\n                    ExcludeLocationTypes: 'Virtual'\n                },\n                options\n            )\n        );\n    }\n\n    getMovieRecommendations(options) {\n        return this.getJSON(this.getUrl('Movies/Recommendations', options));\n    }\n\n    getUpcomingEpisodes(options) {\n        return this.getJSON(this.getUrl('Shows/Upcoming', options));\n    }\n\n    getUserViews(options = {}, userId) {\n        const url = this.getUrl(`Users/${userId || this.getCurrentUserId()}/Views`, options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n        Gets artists from an item\n    */\n    getArtists(userId, options) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl('Artists', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n        Gets artists from an item\n    */\n    getAlbumArtists(userId, options) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl('Artists/AlbumArtists', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n        Gets genres from an item\n    */\n    getGenres(userId, options) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl('Genres', options);\n\n        return this.getJSON(url);\n    }\n\n    getMusicGenres(userId, options) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl('MusicGenres', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n        Gets people from an item\n    */\n    getPeople(userId, options) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl('Persons', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n        Gets studios from an item\n    */\n    getStudios(userId, options) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        options = options || {};\n        options.userId = userId;\n\n        const url = this.getUrl('Studios', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Gets local trailers for an item\n     */\n    getLocalTrailers(userId, itemId) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/${itemId}/LocalTrailers`);\n\n        return this.getJSON(url);\n    }\n\n    getAdditionalVideoParts(userId, itemId) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl(`Videos/${itemId}/AdditionalParts`, options);\n\n        return this.getJSON(url);\n    }\n\n    getThemeMedia(userId, itemId, inherit) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        options.InheritFromParent = inherit || false;\n\n        const url = this.getUrl(`Items/${itemId}/ThemeMedia`, options);\n\n        return this.getJSON(url);\n    }\n\n    getSearchHints(options) {\n        const url = this.getUrl('Search/Hints', options);\n        const serverId = this.serverId();\n\n        return this.getJSON(url).then((result) => {\n            result.SearchHints.forEach((i) => {\n                i.ServerId = serverId;\n            });\n            return result;\n        });\n    }\n\n    /**\n     * Gets special features for an item\n     */\n    getSpecialFeatures(userId, itemId) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/${itemId}/SpecialFeatures`);\n\n        return this.getJSON(url);\n    }\n\n    getDateParamValue(date) {\n        return date.toISOString();\n    }\n\n    markPlayed(userId, itemId, date) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const options = {};\n\n        if (date) {\n            options.DatePlayed = this.getDateParamValue(date);\n        }\n\n        const url = this.getUrl(`Users/${userId}/PlayedItems/${itemId}`, options);\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            dataType: 'json'\n        });\n    }\n\n    markUnplayed(userId, itemId) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/PlayedItems/${itemId}`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url,\n            dataType: 'json'\n        });\n    }\n\n    /**\n     * Updates a user's favorite status for an item.\n     * @param {String} userId\n     * @param {String} itemId\n     * @param {Boolean} isFavorite\n     */\n    updateFavoriteStatus(userId, itemId, isFavorite) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/FavoriteItems/${itemId}`);\n\n        const method = isFavorite ? 'POST' : 'DELETE';\n\n        return this.ajax({\n            type: method,\n            url,\n            dataType: 'json'\n        });\n    }\n\n    /**\n     * Updates a user's personal rating for an item\n     * @param {String} userId\n     * @param {String} itemId\n     * @param {Boolean} likes\n     */\n    updateUserItemRating(userId, itemId, likes) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/${itemId}/Rating`, {\n            likes\n        });\n\n        return this.ajax({\n            type: 'POST',\n            url,\n            dataType: 'json'\n        });\n    }\n\n    getItemCounts(userId) {\n        const options = {};\n\n        if (userId) {\n            options.userId = userId;\n        }\n\n        const url = this.getUrl('Items/Counts', options);\n\n        return this.getJSON(url);\n    }\n\n    /**\n     * Clears a user's personal rating for an item\n     * @param {String} userId\n     * @param {String} itemId\n     */\n    clearUserItemRating(userId, itemId) {\n        if (!userId) {\n            throw new Error('null userId');\n        }\n\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        const url = this.getUrl(`Users/${userId}/Items/${itemId}/Rating`);\n\n        return this.ajax({\n            type: 'DELETE',\n            url,\n            dataType: 'json'\n        });\n    }\n\n    /**\n     * Reports the user has started playing something\n     * @param {String} userId\n     * @param {String} itemId\n     */\n    reportPlaybackStart(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        this.lastPlaybackProgressReport = 0;\n        this.lastPlaybackProgressReportTicks = null;\n        stopBitrateDetection(this);\n\n        cancelReportPlaybackProgressPromise(this);\n        const url = this.getUrl('Sessions/Playing');\n\n        return this.ajax({\n            type: 'POST',\n            data: JSON.stringify(options),\n            contentType: 'application/json',\n            url\n        });\n    }\n\n    /**\n     * Reports progress viewing an item\n     * @param {String} userId\n     * @param {String} itemId\n     */\n    reportPlaybackProgress(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        const eventName = options.EventName || 'timeupdate';\n        let reportRateLimitTime = reportRateLimits[eventName] || 0;\n\n        const now = new Date().getTime();\n        const msSinceLastReport = now - (this.lastPlaybackProgressReport || 0);\n        const newPositionTicks = options.PositionTicks;\n\n        if (msSinceLastReport < reportRateLimitTime && eventName === 'timeupdate' && newPositionTicks) {\n            const expectedReportTicks = 1e4 * msSinceLastReport + (this.lastPlaybackProgressReportTicks || 0);\n            if (Math.abs(newPositionTicks - expectedReportTicks) >= 5e7) reportRateLimitTime = 0;\n        }\n\n        if (\n            reportRateLimitTime <\n            (this.reportPlaybackProgressTimeout !== undefined ? this.reportPlaybackProgressTimeout : 1e6)\n        ) {\n            cancelReportPlaybackProgressPromise(this);\n        }\n\n        this.lastPlaybackProgressOptions = options;\n\n        if (this.reportPlaybackProgressPromise) return Promise.resolve();\n\n        let instance = this;\n        let promise;\n        let cancelled = false;\n\n        let resetPromise = function () {\n            if (instance.reportPlaybackProgressPromise !== promise) return;\n\n            delete instance.lastPlaybackProgressOptions;\n            delete instance.reportPlaybackProgressTimeout;\n            delete instance.reportPlaybackProgressPromise;\n            delete instance.reportPlaybackProgressCancel;\n        };\n\n        let sendReport = function (lastOptions) {\n            resetPromise();\n\n            if (!lastOptions) throw new Error('null options');\n\n            instance.lastPlaybackProgressReport = new Date().getTime();\n            instance.lastPlaybackProgressReportTicks = lastOptions.PositionTicks;\n\n            const url = instance.getUrl('Sessions/Playing/Progress');\n            return instance.ajax({\n                type: 'POST',\n                data: JSON.stringify(lastOptions),\n                contentType: 'application/json',\n                url: url\n            });\n        };\n\n        let delay = Math.max(0, reportRateLimitTime - msSinceLastReport);\n\n        promise = new Promise((resolve, reject) => setTimeout(resolve, delay))\n            .then(() => {\n                if (cancelled) return Promise.resolve();\n                return sendReport(instance.lastPlaybackProgressOptions);\n            })\n            .finally(() => {\n                resetPromise();\n            });\n\n        this.reportPlaybackProgressTimeout = reportRateLimitTime;\n        this.reportPlaybackProgressPromise = promise;\n        this.reportPlaybackProgressCancel = function () {\n            cancelled = true;\n            resetPromise();\n        };\n\n        return promise;\n    }\n\n    reportOfflineActions(actions) {\n        if (!actions) {\n            throw new Error('null actions');\n        }\n\n        const url = this.getUrl('Sync/OfflineActions');\n\n        return this.ajax({\n            type: 'POST',\n            data: JSON.stringify(actions),\n            contentType: 'application/json',\n            url\n        });\n    }\n\n    syncData(data) {\n        if (!data) {\n            throw new Error('null data');\n        }\n\n        const url = this.getUrl('Sync/Data');\n\n        return this.ajax({\n            type: 'POST',\n            data: JSON.stringify(data),\n            contentType: 'application/json',\n            url,\n            dataType: 'json'\n        });\n    }\n\n    getReadySyncItems(deviceId) {\n        if (!deviceId) {\n            throw new Error('null deviceId');\n        }\n\n        const url = this.getUrl('Sync/Items/Ready', {\n            TargetId: deviceId\n        });\n\n        return this.getJSON(url);\n    }\n\n    reportSyncJobItemTransferred(syncJobItemId) {\n        if (!syncJobItemId) {\n            throw new Error('null syncJobItemId');\n        }\n\n        const url = this.getUrl(`Sync/JobItems/${syncJobItemId}/Transferred`);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    cancelSyncItems(itemIds, targetId) {\n        if (!itemIds) {\n            throw new Error('null itemIds');\n        }\n\n        const url = this.getUrl(`Sync/${targetId || this.deviceId()}/Items`, {\n            ItemIds: itemIds.join(',')\n        });\n\n        return this.ajax({\n            type: 'DELETE',\n            url\n        });\n    }\n\n    /**\n     * Reports a user has stopped playing an item\n     * @param {String} userId\n     * @param {String} itemId\n     */\n    reportPlaybackStopped(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        this.lastPlaybackProgressReport = 0;\n        this.lastPlaybackProgressReportTicks = null;\n        redetectBitrate(this);\n\n        cancelReportPlaybackProgressPromise(this);\n        const url = this.getUrl('Sessions/Playing/Stopped');\n\n        return this.ajax({\n            type: 'POST',\n            data: JSON.stringify(options),\n            contentType: 'application/json',\n            url\n        });\n    }\n\n    sendPlayCommand(sessionId, options) {\n        if (!sessionId) {\n            throw new Error('null sessionId');\n        }\n\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        const url = this.getUrl(`Sessions/${sessionId}/Playing`, options);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    sendCommand(sessionId, command) {\n        if (!sessionId) {\n            throw new Error('null sessionId');\n        }\n\n        if (!command) {\n            throw new Error('null command');\n        }\n\n        const url = this.getUrl(`Sessions/${sessionId}/Command`);\n\n        const ajaxOptions = {\n            type: 'POST',\n            url\n        };\n\n        ajaxOptions.data = JSON.stringify(command);\n        ajaxOptions.contentType = 'application/json';\n\n        return this.ajax(ajaxOptions);\n    }\n\n    sendMessageCommand(sessionId, options) {\n        if (!sessionId) {\n            throw new Error('null sessionId');\n        }\n\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        const url = this.getUrl(`Sessions/${sessionId}/Message`);\n\n        const ajaxOptions = {\n            type: 'POST',\n            url\n        };\n\n        ajaxOptions.data = JSON.stringify(options);\n        ajaxOptions.contentType = 'application/json';\n\n        return this.ajax(ajaxOptions);\n    }\n\n    sendPlayStateCommand(sessionId, command, options) {\n        if (!sessionId) {\n            throw new Error('null sessionId');\n        }\n\n        if (!command) {\n            throw new Error('null command');\n        }\n\n        const url = this.getUrl(`Sessions/${sessionId}/Playing/${command}`, options || {});\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    /**\n     * Gets a list of all the active SyncPlay groups from the server.\n     * @returns {Promise} A Promise that resolves to the list of active groups.\n     * @since 10.6.0\n     */\n    getSyncPlayGroups() {\n        const url = this.getUrl(`SyncPlay/List`);\n\n        return this.ajax({\n            type: 'GET',\n            url: url\n        });\n    }\n\n    /**\n     * Creates a SyncPlay group on the server with the current client as member.\n     * @param {object} options Settings for the SyncPlay group to create.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.6.0\n     */\n    createSyncPlayGroup(options = {}) {\n        const url = this.getUrl(`SyncPlay/New`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Joins the client to a given SyncPlay group on the server.\n     * @param {object} options Information about the SyncPlay group to join.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.6.0\n     */\n    joinSyncPlayGroup(options = {}) {\n        const url = this.getUrl(`SyncPlay/Join`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Leaves the current SyncPlay group.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.6.0\n     */\n    leaveSyncPlayGroup() {\n        const url = this.getUrl(`SyncPlay/Leave`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url\n        });\n    }\n\n    /**\n     * Sends a ping to the SyncPlay group on the server.\n     * @param {object} options Information about the ping\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.6.0\n     */\n    sendSyncPlayPing(options = {}) {\n        const url = this.getUrl(`SyncPlay/Ping`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests to set a new playlist for the SyncPlay group.\n     * @param {object} options Options about the new playlist.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlaySetNewQueue(options = {}) {\n        const url = this.getUrl(`SyncPlay/SetNewQueue`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests to change playing item in the SyncPlay group.\n     * @param {object} options Options about the new playing item.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlaySetPlaylistItem(options = {}) {\n        const url = this.getUrl(`SyncPlay/SetPlaylistItem`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests to remove items from the playlist of the SyncPlay group.\n     * @param {object} options Options about the items to remove.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlayRemoveFromPlaylist(options = {}) {\n        const url = this.getUrl(`SyncPlay/RemoveFromPlaylist`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests to move an item in the playlist of the SyncPlay group.\n     * @param {object} options Options about the item to move.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlayMovePlaylistItem(options = {}) {\n        const url = this.getUrl(`SyncPlay/MovePlaylistItem`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests to queue items in the playlist of the SyncPlay group.\n     * @param {object} options Options about the new items.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlayQueue(options = {}) {\n        const url = this.getUrl(`SyncPlay/Queue`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests a playback unpause for the SyncPlay group.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlayUnpause() {\n        const url = this.getUrl(`SyncPlay/Unpause`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url\n        });\n    }\n\n    /**\n     * Requests a playback pause for the SyncPlay group.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.6.0\n     */\n    requestSyncPlayPause() {\n        const url = this.getUrl(`SyncPlay/Pause`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url\n        });\n    }\n\n    /**\n     * Requests a playback seek for the SyncPlay group.\n     * @param {object} options Object containing the requested seek position.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.6.0\n     */\n    requestSyncPlaySeek(options = {}) {\n        const url = this.getUrl(`SyncPlay/Seek`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests the next item for the SyncPlay group.\n     * @param {object} options Options about the current playlist.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlayNextItem(options = {}) {\n        const url = this.getUrl(`SyncPlay/NextItem`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests the previous item for the SyncPlay group.\n     * @param {object} options Options about the current playlist.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlayPreviousItem(options = {}) {\n        const url = this.getUrl(`SyncPlay/PreviousItem`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests to change repeat mode for the SyncPlay group.\n     * @param {object} options Options about the repeat mode.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlaySetRepeatMode(options = {}) {\n        const url = this.getUrl(`SyncPlay/SetRepeatMode`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests to change shuffle mode for the SyncPlay group.\n     * @param {object} options Options about the shuffle mode.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlaySetShuffleMode(options = {}) {\n        const url = this.getUrl(`SyncPlay/SetShuffleMode`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Notifies the server that this client is buffering.\n     * @param {object} options The player status.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlayBuffering(options = {}) {\n        const url = this.getUrl(`SyncPlay/Buffering`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Notifies the server that this client is ready for playback.\n     * @param {object} options The player status.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlayReady(options = {}) {\n        const url = this.getUrl(`SyncPlay/Ready`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    /**\n     * Requests to change this client's ignore-wait state.\n     * @param {object} options Options about the ignore-wait state.\n     * @returns {Promise} A Promise fulfilled upon request completion.\n     * @since 10.7.0\n     */\n    requestSyncPlaySetIgnoreWait(options = {}) {\n        const url = this.getUrl(`SyncPlay/SetIgnoreWait`);\n\n        return this.ajax({\n            type: 'POST',\n            url: url,\n            data: JSON.stringify(options),\n            contentType: 'application/json'\n        });\n    }\n\n    createPackageReview(review) {\n        const url = this.getUrl(`Packages/Reviews/${review.id}`, review);\n\n        return this.ajax({\n            type: 'POST',\n            url\n        });\n    }\n\n    getPackageReviews(packageId, minRating, maxRating, limit) {\n        if (!packageId) {\n            throw new Error('null packageId');\n        }\n\n        const options = {};\n\n        if (minRating) {\n            options.MinRating = minRating;\n        }\n        if (maxRating) {\n            options.MaxRating = maxRating;\n        }\n        if (limit) {\n            options.Limit = limit;\n        }\n\n        const url = this.getUrl(`Packages/${packageId}/Reviews`, options);\n\n        return this.getJSON(url);\n    }\n\n    getSavedEndpointInfo() {\n        return this._endPointInfo;\n    }\n\n    getEndpointInfo() {\n        const savedValue = this._endPointInfo;\n        if (savedValue) {\n            return Promise.resolve(savedValue);\n        }\n\n        const instance = this;\n        return this.getJSON(this.getUrl('System/Endpoint')).then((endPointInfo) => {\n            setSavedEndpointInfo(instance, endPointInfo);\n            return endPointInfo;\n        });\n    }\n\n    getLatestItems(options = {}) {\n        return this.getJSON(this.getUrl(`Users/${this.getCurrentUserId()}/Items/Latest`, options));\n    }\n\n    getFilters(options) {\n        return this.getJSON(this.getUrl('Items/Filters2', options));\n    }\n\n    setSystemInfo(info) {\n        this._serverVersion = info.Version;\n    }\n\n    serverVersion() {\n        return this._serverVersion;\n    }\n\n    isMinServerVersion(version) {\n        const serverVersion = this.serverVersion();\n\n        if (serverVersion) {\n            return compareVersions(serverVersion, version) >= 0;\n        }\n\n        return false;\n    }\n\n    handleMessageReceived(msg) {\n        onMessageReceivedInternal(this, msg);\n    }\n}\n\nfunction setSavedEndpointInfo(instance, info) {\n    instance._endPointInfo = info;\n}\n\nfunction getTryConnectPromise(instance, url, state, resolve, reject) {\n    console.log('getTryConnectPromise ' + url);\n\n    fetchWithTimeout(\n        instance.getUrl('system/info/public', null, url),\n        {\n            method: 'GET',\n            accept: 'application/json'\n\n            // Commenting this out since the fetch api doesn't have a timeout option yet\n            //timeout: timeout\n        },\n        15000\n    ).then(\n        () => {\n            if (!state.resolved) {\n                state.resolved = true;\n\n                console.log('Reconnect succeeded to ' + url);\n                instance.serverAddress(url);\n                resolve();\n            }\n        },\n        () => {\n            if (!state.resolved) {\n                console.log('Reconnect failed to ' + url);\n\n                state.rejects++;\n                if (state.rejects >= state.numAddresses) {\n                    reject();\n                }\n            }\n        }\n    );\n}\n\nfunction tryReconnectInternal(instance) {\n    const addresses = [];\n    const addressesStrings = [];\n\n    const serverInfo = instance.serverInfo();\n    if (serverInfo.LocalAddress && addressesStrings.indexOf(serverInfo.LocalAddress) === -1) {\n        addresses.push({ url: serverInfo.LocalAddress, timeout: 0 });\n        addressesStrings.push(addresses[addresses.length - 1].url);\n    }\n    if (serverInfo.ManualAddress && addressesStrings.indexOf(serverInfo.ManualAddress) === -1) {\n        addresses.push({ url: serverInfo.ManualAddress, timeout: 100 });\n        addressesStrings.push(addresses[addresses.length - 1].url);\n    }\n    if (serverInfo.RemoteAddress && addressesStrings.indexOf(serverInfo.RemoteAddress) === -1) {\n        addresses.push({ url: serverInfo.RemoteAddress, timeout: 200 });\n        addressesStrings.push(addresses[addresses.length - 1].url);\n    }\n\n    console.log('tryReconnect: ' + addressesStrings.join('|'));\n\n    return new Promise((resolve, reject) => {\n        const state = {};\n        state.numAddresses = addresses.length;\n        state.rejects = 0;\n\n        addresses.map((url) => {\n            setTimeout(() => {\n                if (!state.resolved) {\n                    getTryConnectPromise(instance, url.url, state, resolve, reject);\n                }\n            }, url.timeout);\n        });\n    });\n}\n\nfunction tryReconnect(instance, retryCount) {\n    retryCount = retryCount || 0;\n\n    if (retryCount >= 20) {\n        return Promise.reject();\n    }\n\n    return tryReconnectInternal(instance).catch((err) => {\n        console.log('error in tryReconnectInternal: ' + (err || ''));\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                tryReconnect(instance, retryCount + 1).then(resolve, reject);\n            }, 500);\n        });\n    });\n}\n\nfunction getCachedUser(instance, userId) {\n    const serverId = instance.serverId();\n    if (!serverId) {\n        return null;\n    }\n\n    const json = appStorage.getItem(`user-${userId}-${serverId}`);\n\n    if (json) {\n        return JSON.parse(json);\n    }\n\n    return null;\n}\n\nfunction onWebSocketMessage(msg) {\n    const instance = this;\n    msg = JSON.parse(msg.data);\n    onMessageReceivedInternal(instance, msg);\n}\n\nconst messageIdsReceived = {};\n\nfunction onMessageReceivedInternal(instance, msg) {\n    const messageId = msg.MessageId;\n    if (messageId) {\n        // message was already received via another protocol\n        if (messageIdsReceived[messageId]) {\n            return;\n        }\n\n        messageIdsReceived[messageId] = true;\n    }\n\n    if (msg.MessageType === 'UserDeleted') {\n        instance._currentUser = null;\n    } else if (msg.MessageType === 'UserUpdated' || msg.MessageType === 'UserConfigurationUpdated') {\n        const user = msg.Data;\n        if (user.Id === instance.getCurrentUserId()) {\n            instance._currentUser = null;\n        }\n    } else if (msg.MessageType === 'KeepAlive') {\n        console.debug('Received KeepAlive from server.');\n    } else if (msg.MessageType === 'ForceKeepAlive') {\n        console.debug(`Received ForceKeepAlive from server. Timeout is ${msg.Data} seconds.`);\n        instance.sendWebSocketMessage('KeepAlive');\n        scheduleKeepAlive(instance, msg.Data);\n    }\n\n    events.trigger(instance, 'message', [msg]);\n}\n\n/**\n * Starts a poller that sends KeepAlive messages using a WebSocket connection.\n * @param {Object} apiClient The ApiClient instance.\n * @param {number} timeout The number of seconds after which the WebSocket is considered lost by the server.\n * @returns {number} The id of the interval.\n * @since 10.6.0\n */\nfunction scheduleKeepAlive(apiClient, timeout) {\n    clearKeepAlive(apiClient);\n    apiClient.keepAliveInterval = setInterval(() => {\n        apiClient.sendWebSocketMessage('KeepAlive');\n    }, timeout * 1000 * 0.5);\n    return apiClient.keepAliveInterval;\n}\n\n/**\n * Stops the poller that is sending KeepAlive messages on a WebSocket connection.\n * @param {Object} apiClient The ApiClient instance.\n * @since 10.6.0\n */\nfunction clearKeepAlive(apiClient) {\n    console.debug('Clearing KeepAlive for', apiClient._webSocket);\n    if (apiClient.keepAliveInterval) {\n        clearInterval(apiClient.keepAliveInterval);\n        apiClient.keepAliveInterval = null;\n    }\n}\n\nfunction onWebSocketOpen() {\n    const instance = this;\n    console.log('web socket connection opened');\n    events.trigger(instance, 'websocketopen');\n}\n\nfunction onWebSocketError() {\n    const instance = this;\n    clearKeepAlive(instance);\n    events.trigger(instance, 'websocketerror');\n}\n\nfunction setSocketOnClose(apiClient, socket) {\n    socket.onclose = () => {\n        console.log('web socket closed');\n\n        clearKeepAlive(apiClient);\n        if (apiClient._webSocket === socket) {\n            console.log('nulling out web socket');\n            apiClient._webSocket = null;\n        }\n\n        setTimeout(() => {\n            events.trigger(apiClient, 'websocketclose');\n        }, 0);\n    };\n}\n\nfunction normalizeReturnBitrate(instance, bitrate) {\n    if (!bitrate) {\n        if (instance.lastDetectedBitrate) {\n            return instance.lastDetectedBitrate;\n        }\n\n        return Promise.reject();\n    }\n\n    let result = Math.round(bitrate * 0.7);\n\n    // allow configuration of this\n    if (instance.getMaxBandwidth) {\n        const maxRate = instance.getMaxBandwidth();\n        if (maxRate) {\n            result = Math.min(result, maxRate);\n        }\n    }\n\n    instance.lastDetectedBitrate = result;\n    instance.lastDetectedBitrateTime = new Date().getTime();\n\n    return result;\n}\n\nfunction detectBitrateInternal(instance, tests, index, currentBitrate) {\n    if (index >= tests.length) {\n        return normalizeReturnBitrate(instance, currentBitrate);\n    }\n\n    const test = tests[index];\n\n    return instance.getDownloadSpeed(test.bytes).then(\n        (bitrate) => {\n            if (bitrate < test.threshold) {\n                return normalizeReturnBitrate(instance, bitrate);\n            } else {\n                return detectBitrateInternal(instance, tests, index + 1, bitrate);\n            }\n        },\n        () => normalizeReturnBitrate(instance, currentBitrate)\n    );\n}\n\nfunction detectBitrateWithEndpointInfo(instance, endpointInfo) {\n    if (endpointInfo.IsInNetwork) {\n        const result = 140000000;\n        instance.lastDetectedBitrate = result;\n        instance.lastDetectedBitrateTime = new Date().getTime();\n        return result;\n    }\n\n    return detectBitrateInternal(\n        instance,\n        [\n            {\n                bytes: 500000,\n                threshold: 500000\n            },\n            {\n                bytes: 1000000,\n                threshold: 20000000\n            },\n            {\n                bytes: 3000000,\n                threshold: 50000000\n            }\n        ],\n        0\n    );\n}\n\nfunction getRemoteImagePrefix(instance, options) {\n    let urlPrefix;\n\n    if (options.artist) {\n        urlPrefix = `Artists/${instance.encodeName(options.artist)}`;\n        delete options.artist;\n    } else if (options.person) {\n        urlPrefix = `Persons/${instance.encodeName(options.person)}`;\n        delete options.person;\n    } else if (options.genre) {\n        urlPrefix = `Genres/${instance.encodeName(options.genre)}`;\n        delete options.genre;\n    } else if (options.musicGenre) {\n        urlPrefix = `MusicGenres/${instance.encodeName(options.musicGenre)}`;\n        delete options.musicGenre;\n    } else if (options.studio) {\n        urlPrefix = `Studios/${instance.encodeName(options.studio)}`;\n        delete options.studio;\n    } else {\n        urlPrefix = `Items/${options.itemId}`;\n        delete options.itemId;\n    }\n\n    return urlPrefix;\n}\n\nfunction normalizeImageOptions(instance, options) {\n    let ratio = window && window.devicePixelRatio || 1;\n\n    if (ratio) {\n        if (options.minScale) {\n            ratio = Math.max(options.minScale, ratio);\n        }\n\n        if (options.width) {\n            options.width = Math.round(options.width * ratio);\n        }\n        if (options.height) {\n            options.height = Math.round(options.height * ratio);\n        }\n        if (options.maxWidth) {\n            options.maxWidth = Math.round(options.maxWidth * ratio);\n        }\n        if (options.maxHeight) {\n            options.maxHeight = Math.round(options.maxHeight * ratio);\n        }\n        if (options.fillWidth) {\n            options.fillWidth = Math.round(options.fillWidth * ratio);\n        }\n        if (options.fillHeight) {\n            options.fillHeight = Math.round(options.fillHeight * ratio);\n        }\n    }\n\n    options.quality = options.quality || instance.getDefaultImageQuality(options.type);\n\n    if (instance.normalizeImageOptions) {\n        instance.normalizeImageOptions(options);\n    }\n}\n\nfunction compareVersions(a, b) {\n    // -1 a is smaller\n    // 1 a is larger\n    // 0 equal\n    a = a.split('.');\n    b = b.split('.');\n\n    for (let i = 0, length = Math.max(a.length, b.length); i < length; i++) {\n        const aVal = parseInt(a[i] || '0');\n        const bVal = parseInt(b[i] || '0');\n\n        if (aVal < bVal) {\n            return -1;\n        }\n\n        if (aVal > bVal) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\nexport default ApiClient;\n","import ApiClient from './apiClient';\n\nconst localPrefix = 'local:';\nconst localViewPrefix = 'localview:';\n\nfunction isLocalId(str) {\n    return startsWith(str, localPrefix);\n}\n\nfunction isLocalViewId(str) {\n    return startsWith(str, localViewPrefix);\n}\n\nfunction isTopLevelLocalViewId(str) {\n    return str === 'localview';\n}\n\nfunction stripLocalPrefix(str) {\n    let res = stripStart(str, localPrefix);\n    res = stripStart(res, localViewPrefix);\n\n    return res;\n}\n\nfunction startsWith(str, find) {\n    if (str && find && str.length > find.length) {\n        if (str.indexOf(find) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction stripStart(str, find) {\n    if (startsWith(str, find)) {\n        return str.substr(find.length);\n    }\n\n    return str;\n}\n\nfunction createEmptyList() {\n    const result = {\n        Items: [],\n        TotalRecordCount: 0\n    };\n\n    return result;\n}\n\nfunction convertGuidToLocal(guid) {\n    if (!guid) {\n        return null;\n    }\n\n    if (isLocalId(guid)) {\n        return guid;\n    }\n\n    return `local:${guid}`;\n}\n\nfunction adjustGuidProperties(downloadedItem) {\n    downloadedItem.Id = convertGuidToLocal(downloadedItem.Id);\n    downloadedItem.SeriesId = convertGuidToLocal(downloadedItem.SeriesId);\n    downloadedItem.SeasonId = convertGuidToLocal(downloadedItem.SeasonId);\n\n    downloadedItem.AlbumId = convertGuidToLocal(downloadedItem.AlbumId);\n    downloadedItem.ParentId = convertGuidToLocal(downloadedItem.ParentId);\n    downloadedItem.ParentThumbItemId = convertGuidToLocal(downloadedItem.ParentThumbItemId);\n    downloadedItem.ParentPrimaryImageItemId = convertGuidToLocal(downloadedItem.ParentPrimaryImageItemId);\n    downloadedItem.PrimaryImageItemId = convertGuidToLocal(downloadedItem.PrimaryImageItemId);\n    downloadedItem.ParentLogoItemId = convertGuidToLocal(downloadedItem.ParentLogoItemId);\n    downloadedItem.ParentBackdropItemId = convertGuidToLocal(downloadedItem.ParentBackdropItemId);\n\n    downloadedItem.ParentBackdropImageTags = null;\n}\n\nfunction getLocalView(instance, serverId, userId) {\n    return instance.getLocalFolders(serverId, userId).then((views) => {\n        let localView = null;\n\n        if (views.length > 0) {\n            localView = {\n                Name: instance.downloadsTitleText || 'Downloads',\n                ServerId: serverId,\n                Id: 'localview',\n                Type: 'localview',\n                IsFolder: true\n            };\n        }\n\n        return Promise.resolve(localView);\n    });\n}\n\n/**\n * Creates a new api client instance\n * @param {String} serverAddress\n * @param {String} clientName s\n * @param {String} applicationVersion\n */\nclass ApiClientCore extends ApiClient {\n    constructor(\n        serverAddress,\n        clientName,\n        applicationVersion,\n        deviceName,\n        deviceId,\n        devicePixelRatio,\n        localAssetManager\n    ) {\n        super(serverAddress, clientName, applicationVersion, deviceName, deviceId, devicePixelRatio);\n        this.localAssetManager = localAssetManager;\n    }\n\n    getPlaybackInfo(itemId, options, deviceProfile) {\n        const onFailure = () => ApiClient.prototype.getPlaybackInfo.call(instance, itemId, options, deviceProfile);\n\n        if (isLocalId(itemId)) {\n            return this.localAssetManager.getLocalItem(this.serverId(), stripLocalPrefix(itemId)).then((item) => {\n                // TODO: This was already done during the sync process, right? If so, remove it\n                const mediaSources = item.Item.MediaSources.map((m) => {\n                    m.SupportsDirectPlay = true;\n                    m.SupportsDirectStream = false;\n                    m.SupportsTranscoding = false;\n                    m.IsLocal = true;\n                    return m;\n                });\n\n                return {\n                    MediaSources: mediaSources\n                };\n            }, onFailure);\n        }\n\n        var instance = this;\n        return this.localAssetManager.getLocalItem(this.serverId(), itemId).then((item) => {\n            if (item) {\n                const mediaSources = item.Item.MediaSources.map((m) => {\n                    m.SupportsDirectPlay = true;\n                    m.SupportsDirectStream = false;\n                    m.SupportsTranscoding = false;\n                    m.IsLocal = true;\n                    return m;\n                });\n\n                return instance.localAssetManager.fileExists(item.LocalPath).then((exists) => {\n                    if (exists) {\n                        const res = {\n                            MediaSources: mediaSources\n                        };\n\n                        return Promise.resolve(res);\n                    }\n\n                    return ApiClient.prototype.getPlaybackInfo.call(instance, itemId, options, deviceProfile);\n                }, onFailure);\n            }\n\n            return ApiClient.prototype.getPlaybackInfo.call(instance, itemId, options, deviceProfile);\n        }, onFailure);\n    }\n\n    getItems(userId, options) {\n        const serverInfo = this.serverInfo();\n        let i;\n\n        if (serverInfo && options.ParentId === 'localview') {\n            return this.getLocalFolders(serverInfo.Id, userId).then((items) => {\n                const result = {\n                    Items: items,\n                    TotalRecordCount: items.length\n                };\n\n                return Promise.resolve(result);\n            });\n        } else if (\n            serverInfo &&\n            options &&\n            (isLocalId(options.ParentId) ||\n                isLocalId(options.SeriesId) ||\n                isLocalId(options.SeasonId) ||\n                isLocalViewId(options.ParentId) ||\n                isLocalId(options.AlbumIds))\n        ) {\n            return this.localAssetManager.getViewItems(serverInfo.Id, userId, options).then((items) => {\n                items.forEach((item) => {\n                    adjustGuidProperties(item);\n                });\n\n                const result = {\n                    Items: items,\n                    TotalRecordCount: items.length\n                };\n\n                return Promise.resolve(result);\n            });\n        } else if (options && options.ExcludeItemIds && options.ExcludeItemIds.length) {\n            const exItems = options.ExcludeItemIds.split(',');\n\n            for (i = 0; i < exItems.length; i++) {\n                if (isLocalId(exItems[i])) {\n                    return Promise.resolve(createEmptyList());\n                }\n            }\n        } else if (options && options.Ids && options.Ids.length) {\n            const ids = options.Ids.split(',');\n            let hasLocal = false;\n\n            for (i = 0; i < ids.length; i++) {\n                if (isLocalId(ids[i])) {\n                    hasLocal = true;\n                }\n            }\n\n            if (hasLocal) {\n                return this.localAssetManager.getItemsFromIds(serverInfo.Id, ids).then((items) => {\n                    items.forEach((item) => {\n                        adjustGuidProperties(item);\n                    });\n\n                    const result = {\n                        Items: items,\n                        TotalRecordCount: items.length\n                    };\n\n                    return Promise.resolve(result);\n                });\n            }\n        }\n\n        return ApiClient.prototype.getItems.call(this, userId, options);\n    }\n\n    getUserViews(options, userId) {\n        const instance = this;\n\n        options = options || {};\n\n        const basePromise = ApiClient.prototype.getUserViews.call(instance, options, userId);\n\n        if (!options.enableLocalView) {\n            return basePromise;\n        }\n\n        return basePromise.then((result) => {\n            const serverInfo = instance.serverInfo();\n            if (serverInfo) {\n                return getLocalView(instance, serverInfo.Id, userId).then((localView) => {\n                    if (localView) {\n                        result.Items.push(localView);\n                        result.TotalRecordCount++;\n                    }\n\n                    return Promise.resolve(result);\n                });\n            }\n\n            return Promise.resolve(result);\n        });\n    }\n\n    getItem(userId, itemId) {\n        if (!itemId) {\n            throw new Error('null itemId');\n        }\n\n        if (itemId) {\n            itemId = itemId.toString();\n        }\n\n        let serverInfo;\n\n        if (isTopLevelLocalViewId(itemId)) {\n            serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n                return getLocalView(this, serverInfo.Id, userId);\n            }\n        }\n\n        if (isLocalViewId(itemId)) {\n            serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n                return this.getLocalFolders(serverInfo.Id, userId).then((items) => {\n                    const views = items.filter((item) => item.Id === itemId);\n\n                    if (views.length > 0) {\n                        return Promise.resolve(views[0]);\n                    }\n\n                    // TODO: Test consequence of this\n                    return Promise.reject();\n                });\n            }\n        }\n\n        if (isLocalId(itemId)) {\n            serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n                return this.localAssetManager.getLocalItem(serverInfo.Id, stripLocalPrefix(itemId)).then((item) => {\n                    adjustGuidProperties(item.Item);\n\n                    return Promise.resolve(item.Item);\n                });\n            }\n        }\n\n        return ApiClient.prototype.getItem.call(this, userId, itemId);\n    }\n\n    getLocalFolders(userId) {\n        const serverInfo = this.serverInfo();\n        userId = userId || serverInfo.UserId;\n\n        return this.localAssetManager.getViews(serverInfo.Id, userId);\n    }\n\n    getNextUpEpisodes(options) {\n        if (options.SeriesId) {\n            if (isLocalId(options.SeriesId)) {\n                return Promise.resolve(createEmptyList());\n            }\n        }\n\n        return ApiClient.prototype.getNextUpEpisodes.call(this, options);\n    }\n\n    getSeasons(itemId, options) {\n        if (isLocalId(itemId)) {\n            options.SeriesId = itemId;\n            options.IncludeItemTypes = 'Season';\n            return this.getItems(this.getCurrentUserId(), options);\n        }\n\n        return ApiClient.prototype.getSeasons.call(this, itemId, options);\n    }\n\n    getEpisodes(itemId, options) {\n        if (isLocalId(options.SeasonId) || isLocalId(options.seasonId)) {\n            options.SeriesId = itemId;\n            options.IncludeItemTypes = 'Episode';\n            return this.getItems(this.getCurrentUserId(), options);\n        }\n\n        // get episodes by recursion\n        if (isLocalId(itemId)) {\n            options.SeriesId = itemId;\n            options.IncludeItemTypes = 'Episode';\n            return this.getItems(this.getCurrentUserId(), options);\n        }\n\n        return ApiClient.prototype.getEpisodes.call(this, itemId, options);\n    }\n\n    getLatestOfflineItems(options) {\n        // Supported options\n        // MediaType - Audio/Video/Photo/Book/Game\n        // Limit\n        // Filters: 'IsNotFolder' or 'IsFolder'\n\n        options.SortBy = 'DateCreated';\n        options.SortOrder = 'Descending';\n\n        const serverInfo = this.serverInfo();\n\n        if (serverInfo) {\n            return this.localAssetManager.getViewItems(serverInfo.Id, null, options).then((items) => {\n                items.forEach((item) => {\n                    adjustGuidProperties(item);\n                });\n\n                return Promise.resolve(items);\n            });\n        }\n\n        return Promise.resolve([]);\n    }\n\n    getThemeMedia(userId, itemId, inherit) {\n        if (isLocalViewId(itemId) || isLocalId(itemId) || isTopLevelLocalViewId(itemId)) {\n            return Promise.reject();\n        }\n\n        return ApiClient.prototype.getThemeMedia.call(this, userId, itemId, inherit);\n    }\n\n    getSpecialFeatures(userId, itemId) {\n        if (isLocalId(itemId)) {\n            return Promise.resolve([]);\n        }\n\n        return ApiClient.prototype.getSpecialFeatures.call(this, userId, itemId);\n    }\n\n    getSimilarItems(itemId, options) {\n        if (isLocalId(itemId)) {\n            return Promise.resolve(createEmptyList());\n        }\n\n        return ApiClient.prototype.getSimilarItems.call(this, itemId, options);\n    }\n\n    updateFavoriteStatus(userId, itemId, isFavorite) {\n        if (isLocalId(itemId)) {\n            return Promise.resolve();\n        }\n\n        return ApiClient.prototype.updateFavoriteStatus.call(this, userId, itemId, isFavorite);\n    }\n\n    getScaledImageUrl(itemId, options) {\n        if (isLocalId(itemId) || (options && options.itemid && isLocalId(options.itemid))) {\n            const serverInfo = this.serverInfo();\n            const id = stripLocalPrefix(itemId);\n\n            return this.localAssetManager.getImageUrl(serverInfo.Id, id, options);\n        }\n\n        return ApiClient.prototype.getScaledImageUrl.call(this, itemId, options);\n    }\n\n    reportPlaybackStart(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        if (isLocalId(options.ItemId)) {\n            return Promise.resolve();\n        }\n\n        return ApiClient.prototype.reportPlaybackStart.call(this, options);\n    }\n\n    reportPlaybackProgress(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        if (isLocalId(options.ItemId)) {\n            const serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n                const instance = this;\n                return this.localAssetManager\n                    .getLocalItem(serverInfo.Id, stripLocalPrefix(options.ItemId))\n                    .then((item) => {\n                        const libraryItem = item.Item;\n\n                        if (libraryItem.MediaType === 'Video' || libraryItem.Type === 'AudioBook') {\n                            libraryItem.UserData = libraryItem.UserData || {};\n                            libraryItem.UserData.PlaybackPositionTicks = options.PositionTicks;\n                            libraryItem.UserData.PlayedPercentage = Math.min(\n                                libraryItem.RunTimeTicks\n                                    ? 100 * ((options.PositionTicks || 0) / libraryItem.RunTimeTicks)\n                                    : 0,\n                                100\n                            );\n                            return instance.localAssetManager.addOrUpdateLocalItem(item);\n                        }\n\n                        return Promise.resolve();\n                    });\n            }\n\n            return Promise.resolve();\n        }\n\n        return ApiClient.prototype.reportPlaybackProgress.call(this, options);\n    }\n\n    reportPlaybackStopped(options) {\n        if (!options) {\n            throw new Error('null options');\n        }\n\n        if (isLocalId(options.ItemId)) {\n            const serverInfo = this.serverInfo();\n\n            const action = {\n                Date: new Date().getTime(),\n                ItemId: stripLocalPrefix(options.ItemId),\n                PositionTicks: options.PositionTicks,\n                ServerId: serverInfo.Id,\n                Type: 0, // UserActionType.PlayedItem\n                UserId: this.getCurrentUserId()\n            };\n\n            return this.localAssetManager.recordUserAction(action);\n        }\n\n        return ApiClient.prototype.reportPlaybackStopped.call(this, options);\n    }\n\n    getIntros(itemId) {\n        if (isLocalId(itemId)) {\n            return Promise.resolve({\n                Items: [],\n                TotalRecordCount: 0\n            });\n        }\n\n        return ApiClient.prototype.getIntros.call(this, itemId);\n    }\n\n    getInstantMixFromItem(itemId, options) {\n        if (isLocalId(itemId)) {\n            return Promise.resolve({\n                Items: [],\n                TotalRecordCount: 0\n            });\n        }\n\n        return ApiClient.prototype.getInstantMixFromItem.call(this, itemId, options);\n    }\n\n    getItemDownloadUrl(itemId) {\n        if (isLocalId(itemId)) {\n            const serverInfo = this.serverInfo();\n\n            if (serverInfo) {\n                return this.localAssetManager\n                    .getLocalItem(serverInfo.Id, stripLocalPrefix(itemId))\n                    .then((item) => Promise.resolve(item.LocalPath));\n            }\n        }\n\n        return ApiClient.prototype.getItemDownloadUrl.call(this, itemId);\n    }\n}\n\nexport default ApiClientCore;\n","import events from './events';\nimport ApiClient from './apiClient';\n\nconst defaultTimeout = 20000;\n\nconst ConnectionMode = {\n    Local: 0,\n    Remote: 1,\n    Manual: 2\n};\n\nfunction getServerAddress(server, mode) {\n    switch (mode) {\n        case ConnectionMode.Local:\n            return server.LocalAddress;\n        case ConnectionMode.Manual:\n            return server.ManualAddress;\n        case ConnectionMode.Remote:\n            return server.RemoteAddress;\n        default:\n            return server.ManualAddress || server.LocalAddress || server.RemoteAddress;\n    }\n}\n\nfunction paramsToString(params) {\n    const values = [];\n\n    for (const key in params) {\n        const value = params[key];\n\n        if (value !== null && value !== undefined && value !== '') {\n            values.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return values.join('&');\n}\n\nfunction resolveFailure(instance, resolve) {\n    resolve({\n        State: 'Unavailable'\n    });\n}\n\nfunction mergeServers(credentialProvider, list1, list2) {\n    for (let i = 0, length = list2.length; i < length; i++) {\n        credentialProvider.addOrUpdateServer(list1, list2[i]);\n    }\n\n    return list1;\n}\n\nfunction updateServerInfo(server, systemInfo) {\n    server.Name = systemInfo.ServerName;\n\n    if (systemInfo.Id) {\n        server.Id = systemInfo.Id;\n    }\n    if (systemInfo.LocalAddress) {\n        server.LocalAddress = systemInfo.LocalAddress;\n    }\n}\n\nfunction getEmbyServerUrl(baseUrl, handler) {\n    return `${baseUrl}/${handler}`;\n}\n\nfunction getFetchPromise(request) {\n    const headers = request.headers || {};\n\n    if (request.dataType === 'json') {\n        headers.accept = 'application/json';\n    }\n\n    const fetchRequest = {\n        headers,\n        method: request.type,\n        credentials: 'same-origin'\n    };\n\n    let contentType = request.contentType;\n\n    if (request.data) {\n        if (typeof request.data === 'string') {\n            fetchRequest.body = request.data;\n        } else {\n            fetchRequest.body = paramsToString(request.data);\n\n            contentType = contentType || 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n    }\n\n    if (contentType) {\n        headers['Content-Type'] = contentType;\n    }\n\n    if (!request.timeout) {\n        return fetch(request.url, fetchRequest);\n    }\n\n    return fetchWithTimeout(request.url, fetchRequest, request.timeout);\n}\n\nfunction fetchWithTimeout(url, options, timeoutMs) {\n    console.log(`fetchWithTimeout: timeoutMs: ${timeoutMs}, url: ${url}`);\n\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(reject, timeoutMs);\n\n        options = options || {};\n        options.credentials = 'same-origin';\n\n        fetch(url, options).then(\n            (response) => {\n                clearTimeout(timeout);\n\n                console.log(`fetchWithTimeout: succeeded connecting to url: ${url}`);\n\n                resolve(response);\n            },\n            (error) => {\n                clearTimeout(timeout);\n\n                console.log(`fetchWithTimeout: timed out connecting to url: ${url}`);\n\n                reject();\n            }\n        );\n    });\n}\n\nfunction ajax(request) {\n    if (!request) {\n        throw new Error('Request cannot be null');\n    }\n\n    request.headers = request.headers || {};\n\n    console.log(`ConnectionManager requesting url: ${request.url}`);\n\n    return getFetchPromise(request).then(\n        (response) => {\n            console.log(`ConnectionManager response status: ${response.status}, url: ${request.url}`);\n\n            if (response.status < 400) {\n                if (request.dataType === 'json' || request.headers.accept === 'application/json') {\n                    return response.json();\n                } else {\n                    return response;\n                }\n            } else {\n                return Promise.reject(response);\n            }\n        },\n        (err) => {\n            console.log(`ConnectionManager request failed to url: ${request.url}`);\n            throw err;\n        }\n    );\n}\n\nfunction replaceAll(originalString, strReplace, strWith) {\n    const reg = new RegExp(strReplace, 'ig');\n    return originalString.replace(reg, strWith);\n}\n\nfunction normalizeAddress(address) {\n    // Attempt to correct bad input\n    address = address.trim();\n\n    // Seeing failures in iOS when protocol isn't lowercase\n    address = replaceAll(address, 'Http:', 'http:');\n    address = replaceAll(address, 'Https:', 'https:');\n\n    return address;\n}\n\nfunction stringEqualsIgnoreCase(str1, str2) {\n    return (str1 || '').toLowerCase() === (str2 || '').toLowerCase();\n}\n\nfunction compareVersions(a, b) {\n    // -1 a is smaller\n    // 1 a is larger\n    // 0 equal\n    a = a.split('.');\n    b = b.split('.');\n\n    for (let i = 0, length = Math.max(a.length, b.length); i < length; i++) {\n        const aVal = parseInt(a[i] || '0');\n        const bVal = parseInt(b[i] || '0');\n\n        if (aVal < bVal) {\n            return -1;\n        }\n\n        if (aVal > bVal) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\nexport default class ConnectionManager {\n    constructor(credentialProvider, appName, appVersion, deviceName, deviceId, capabilities) {\n        console.log('Begin ConnectionManager constructor');\n\n        const self = this;\n        this._apiClients = [];\n\n        self._minServerVersion = '3.2.33';\n\n        self.appVersion = () => appVersion;\n\n        self.appName = () => appName;\n\n        self.capabilities = () => capabilities;\n\n        self.deviceId = () => deviceId;\n\n        self.credentialProvider = () => credentialProvider;\n\n        self.getServerInfo = (id) => {\n            const servers = credentialProvider.credentials().Servers;\n\n            return servers.filter((s) => s.Id === id)[0];\n        };\n\n        self.getLastUsedServer = () => {\n            const servers = credentialProvider.credentials().Servers;\n\n            servers.sort((a, b) => (b.DateLastAccessed || 0) - (a.DateLastAccessed || 0));\n\n            if (!servers.length) {\n                return null;\n            }\n\n            return servers[0];\n        };\n\n        self.addApiClient = (apiClient) => {\n            self._apiClients.push(apiClient);\n\n            const existingServers = credentialProvider\n                .credentials()\n                .Servers.filter(\n                    (s) =>\n                        stringEqualsIgnoreCase(s.ManualAddress, apiClient.serverAddress()) ||\n                        stringEqualsIgnoreCase(s.LocalAddress, apiClient.serverAddress()) ||\n                        stringEqualsIgnoreCase(s.RemoteAddress, apiClient.serverAddress())\n                );\n\n            const existingServer = existingServers.length ? existingServers[0] : apiClient.serverInfo();\n            existingServer.DateLastAccessed = new Date().getTime();\n            existingServer.LastConnectionMode = ConnectionMode.Manual;\n            existingServer.ManualAddress = apiClient.serverAddress();\n\n            if (apiClient.manualAddressOnly) {\n                existingServer.manualAddressOnly = true;\n            }\n\n            apiClient.serverInfo(existingServer);\n\n            apiClient.onAuthenticated = (instance, result) => onAuthenticated(instance, result, {}, true);\n\n            if (!existingServers.length) {\n                const credentials = credentialProvider.credentials();\n                credentials.Servers = [existingServer];\n                credentialProvider.credentials(credentials);\n            }\n\n            events.trigger(self, 'apiclientcreated', [apiClient]);\n        };\n\n        self.clearData = () => {\n            console.log('connection manager clearing data');\n\n            const credentials = credentialProvider.credentials();\n            credentials.Servers = [];\n            credentialProvider.credentials(credentials);\n        };\n\n        self._getOrAddApiClient = (server, serverUrl) => {\n            let apiClient = self.getApiClient(server.Id);\n\n            if (!apiClient) {\n                apiClient = new ApiClient(serverUrl, appName, appVersion, deviceName, deviceId);\n\n                self._apiClients.push(apiClient);\n\n                apiClient.serverInfo(server);\n\n                apiClient.onAuthenticated = (instance, result) => {\n                    return onAuthenticated(instance, result, {}, true);\n                };\n\n                events.trigger(self, 'apiclientcreated', [apiClient]);\n            }\n\n            console.log('returning instance from getOrAddApiClient');\n            return apiClient;\n        };\n\n        self.getOrCreateApiClient = (serverId) => {\n            const credentials = credentialProvider.credentials();\n            const servers = credentials.Servers.filter((s) => stringEqualsIgnoreCase(s.Id, serverId));\n\n            if (!servers.length) {\n                throw new Error(`Server not found: ${serverId}`);\n            }\n\n            const server = servers[0];\n\n            return self._getOrAddApiClient(server, getServerAddress(server, server.LastConnectionMode));\n        };\n\n        function onAuthenticated(apiClient, result, options, saveCredentials) {\n            const credentials = credentialProvider.credentials();\n            const servers = credentials.Servers.filter((s) => s.Id === result.ServerId);\n\n            const server = servers.length ? servers[0] : apiClient.serverInfo();\n\n            if (options.updateDateLastAccessed !== false) {\n                server.DateLastAccessed = new Date().getTime();\n            }\n            server.Id = result.ServerId;\n\n            if (saveCredentials) {\n                server.UserId = result.User.Id;\n                server.AccessToken = result.AccessToken;\n            } else {\n                server.UserId = null;\n                server.AccessToken = null;\n            }\n\n            credentialProvider.addOrUpdateServer(credentials.Servers, server);\n            credentialProvider.credentials(credentials);\n\n            // set this now before updating server info, otherwise it won't be set in time\n            apiClient.enableAutomaticBitrateDetection = options.enableAutomaticBitrateDetection;\n\n            apiClient.serverInfo(server);\n            apiClient.setAuthenticationInfo(result.AccessToken, result.User.Id);\n            afterConnected(apiClient, options);\n\n            return onLocalUserSignIn(server, apiClient.serverAddress(), result.User);\n        }\n\n        function afterConnected(apiClient, options = {}) {\n            if (options.reportCapabilities !== false) {\n                apiClient.reportCapabilities(capabilities);\n            }\n            apiClient.enableAutomaticBitrateDetection = options.enableAutomaticBitrateDetection;\n\n            if (options.enableWebSocket !== false) {\n                console.log('calling apiClient.ensureWebSocket');\n\n                apiClient.ensureWebSocket();\n            }\n        }\n\n        function onLocalUserSignIn(server, serverUrl, user) {\n            // Ensure this is created so that listeners of the event can get the apiClient instance\n            self._getOrAddApiClient(server, serverUrl);\n\n            // This allows the app to have a single hook that fires before any other\n            const promise = self.onLocalUserSignedIn ? self.onLocalUserSignedIn.call(self, user) : Promise.resolve();\n\n            return promise.then(() => {\n                events.trigger(self, 'localusersignedin', [user]);\n            });\n        }\n\n        function validateAuthentication(server, serverUrl) {\n            return ajax({\n                type: 'GET',\n                url: getEmbyServerUrl(serverUrl, 'System/Info'),\n                dataType: 'json',\n                headers: {\n                    'X-MediaBrowser-Token': server.AccessToken\n                }\n            }).then(\n                (systemInfo) => {\n                    updateServerInfo(server, systemInfo);\n                    return Promise.resolve();\n                },\n                () => {\n                    server.UserId = null;\n                    server.AccessToken = null;\n                    return Promise.resolve();\n                }\n            );\n        }\n\n        function getImageUrl(localUser) {\n            if (localUser && localUser.PrimaryImageTag) {\n                const apiClient = self.getApiClient(localUser);\n\n                const url = apiClient.getUserImageUrl(localUser.Id, {\n                    tag: localUser.PrimaryImageTag,\n                    type: 'Primary'\n                });\n\n                return {\n                    url,\n                    supportsParams: true\n                };\n            }\n\n            return {\n                url: null,\n                supportsParams: false\n            };\n        }\n\n        self.user = (apiClient) =>\n            new Promise((resolve, reject) => {\n                let localUser;\n\n                function onLocalUserDone(e) {\n                    if (apiClient && apiClient.getCurrentUserId()) {\n                        apiClient.getCurrentUser().then((u) => {\n                            localUser = u;\n                            const image = getImageUrl(localUser);\n\n                            resolve({\n                                localUser,\n                                name: localUser ? localUser.Name : null,\n                                imageUrl: image.url,\n                                supportsImageParams: image.supportsParams\n                            });\n                        });\n                    }\n                }\n\n                if (apiClient && apiClient.getCurrentUserId()) {\n                    onLocalUserDone();\n                }\n            });\n\n        self.logout = () => {\n            const promises = [];\n\n            for (let i = 0, length = self._apiClients.length; i < length; i++) {\n                const apiClient = self._apiClients[i];\n\n                if (apiClient.accessToken()) {\n                    promises.push(logoutOfServer(apiClient));\n                }\n            }\n\n            return Promise.all(promises).then(() => {\n                const credentials = credentialProvider.credentials();\n\n                const servers = credentials.Servers.filter((u) => u.UserLinkType !== 'Guest');\n\n                for (let j = 0, numServers = servers.length; j < numServers; j++) {\n                    const server = servers[j];\n\n                    server.UserId = null;\n                    server.AccessToken = null;\n                    server.ExchangeToken = null;\n                }\n            });\n        };\n\n        function logoutOfServer(apiClient) {\n            const serverInfo = apiClient.serverInfo() || {};\n\n            const logoutInfo = {\n                serverId: serverInfo.Id\n            };\n\n            return apiClient.logout().then(\n                () => {\n                    events.trigger(self, 'localusersignedout', [logoutInfo]);\n                },\n                () => {\n                    events.trigger(self, 'localusersignedout', [logoutInfo]);\n                }\n            );\n        }\n\n        self.getSavedServers = () => {\n            const credentials = credentialProvider.credentials();\n\n            const servers = credentials.Servers.slice(0);\n\n            servers.sort((a, b) => (b.DateLastAccessed || 0) - (a.DateLastAccessed || 0));\n\n            return servers;\n        };\n\n        self.getAvailableServers = () => {\n            console.log('Begin getAvailableServers');\n\n            // Clone the array\n            const credentials = credentialProvider.credentials();\n\n            return Promise.all([findServers()]).then((responses) => {\n                const foundServers = responses[0];\n                let servers = credentials.Servers.slice(0);\n                mergeServers(credentialProvider, servers, foundServers);\n\n                servers.sort((a, b) => (b.DateLastAccessed || 0) - (a.DateLastAccessed || 0));\n                credentials.Servers = servers;\n                credentialProvider.credentials(credentials);\n\n                return servers;\n            });\n        };\n\n        function findServers() {\n            return new Promise((resolve, reject) => {\n                var onFinish = function (foundServers) {\n                    var servers = foundServers.map((foundServer) => {\n                        var info = {\n                            Id: foundServer.Id,\n                            LocalAddress: convertEndpointAddressToManualAddress(foundServer) || foundServer.Address,\n                            Name: foundServer.Name\n                        };\n                        info.LastConnectionMode = info.ManualAddress ? ConnectionMode.Manual : ConnectionMode.Local;\n                        return info;\n                    });\n                    resolve(servers);\n                };\n\n                if (window && window.NativeShell && typeof window.NativeShell.findServers === 'function') {\n                    window.NativeShell.findServers(1e3).then(onFinish, function () {\n                        onFinish([]);\n                    });\n                } else {\n                    resolve([]);\n                }\n            });\n        }\n\n        function convertEndpointAddressToManualAddress(info) {\n            if (info.Address && info.EndpointAddress) {\n                let address = info.EndpointAddress.split(':')[0];\n\n                // Determine the port, if any\n                const parts = info.Address.split(':');\n                if (parts.length > 1) {\n                    const portString = parts[parts.length - 1];\n\n                    if (!isNaN(parseInt(portString))) {\n                        address += `:${portString}`;\n                    }\n                }\n\n                return normalizeAddress(address);\n            }\n\n            return null;\n        }\n\n        self.connectToServers = (servers, options) => {\n            console.log(`Begin connectToServers, with ${servers.length} servers`);\n\n            const firstServer = servers.length ? servers[0] : null;\n            // See if we have any saved credentials and can auto sign in\n            if (firstServer) {\n                return self.connectToServer(firstServer, options).then((result) => {\n                    if (result.State === 'Unavailable') {\n                        result.State = 'ServerSelection';\n                    }\n\n                    console.log('resolving connectToServers with result.State: ' + result.State);\n                    return result;\n                });\n            }\n\n            return Promise.resolve({\n                Servers: servers,\n                State: 'ServerSelection'\n            });\n        };\n\n        function getTryConnectPromise(url, connectionMode, state, resolve, reject) {\n            console.log('getTryConnectPromise ' + url);\n\n            ajax({\n                url: getEmbyServerUrl(url, 'system/info/public'),\n                timeout: defaultTimeout,\n                type: 'GET',\n                dataType: 'json'\n            }).then(\n                (result) => {\n                    if (!state.resolved) {\n                        state.resolved = true;\n\n                        console.log('Reconnect succeeded to ' + url);\n                        resolve({\n                            url: url,\n                            connectionMode: connectionMode,\n                            data: result\n                        });\n                    }\n                },\n                () => {\n                    console.log('Reconnect failed to ' + url);\n\n                    if (!state.resolved) {\n                        state.rejects++;\n                        if (state.rejects >= state.numAddresses) {\n                            reject();\n                        }\n                    }\n                }\n            );\n        }\n\n        function tryReconnect(serverInfo) {\n            const addresses = [];\n            const addressesStrings = [];\n\n            // the timeouts are a small hack to try and ensure the remote address doesn't resolve first\n\n            // manualAddressOnly is used for the local web app that always connects to a fixed address\n            if (\n                !serverInfo.manualAddressOnly &&\n                serverInfo.LocalAddress &&\n                addressesStrings.indexOf(serverInfo.LocalAddress) === -1\n            ) {\n                addresses.push({\n                    url: serverInfo.LocalAddress,\n                    mode: ConnectionMode.Local,\n                    timeout: 0\n                });\n                addressesStrings.push(addresses[addresses.length - 1].url);\n            }\n            if (serverInfo.ManualAddress && addressesStrings.indexOf(serverInfo.ManualAddress) === -1) {\n                addresses.push({\n                    url: serverInfo.ManualAddress,\n                    mode: ConnectionMode.Manual,\n                    timeout: 100\n                });\n                addressesStrings.push(addresses[addresses.length - 1].url);\n            }\n            if (\n                !serverInfo.manualAddressOnly &&\n                serverInfo.RemoteAddress &&\n                addressesStrings.indexOf(serverInfo.RemoteAddress) === -1\n            ) {\n                addresses.push({\n                    url: serverInfo.RemoteAddress,\n                    mode: ConnectionMode.Remote,\n                    timeout: 200\n                });\n                addressesStrings.push(addresses[addresses.length - 1].url);\n            }\n\n            console.log('tryReconnect: ' + addressesStrings.join('|'));\n\n            return new Promise((resolve, reject) => {\n                const state = {};\n                state.numAddresses = addresses.length;\n                state.rejects = 0;\n\n                addresses.map((url) => {\n                    setTimeout(() => {\n                        if (!state.resolved) {\n                            getTryConnectPromise(url.url, url.mode, state, resolve, reject);\n                        }\n                    }, url.timeout);\n                });\n            });\n        }\n\n        self.connectToServer = (server, options) => {\n            console.log('begin connectToServer');\n\n            return new Promise((resolve, reject) => {\n                options = options || {};\n\n                tryReconnect(server).then(\n                    (result) => {\n                        const serverUrl = result.url;\n                        const connectionMode = result.connectionMode;\n                        result = result.data;\n\n                        if (compareVersions(self.minServerVersion(), result.Version) === 1) {\n                            console.log('minServerVersion requirement not met. Server version: ' + result.Version);\n                            resolve({\n                                State: 'ServerUpdateNeeded',\n                                Servers: [server]\n                            });\n                        } else if (server.Id && result.Id !== server.Id) {\n                            console.log(\n                                'http request succeeded, but found a different server Id than what was expected'\n                            );\n                            resolveFailure(self, resolve);\n                        } else {\n                            onSuccessfulConnection(server, result, connectionMode, serverUrl, true, resolve, options);\n                        }\n                    },\n                    () => {\n                        resolveFailure(self, resolve);\n                    }\n                );\n            });\n        };\n\n        function onSuccessfulConnection(server, systemInfo, connectionMode, serverUrl, verifyLocalAuthentication, resolve, options={}) {\n            const credentials = credentialProvider.credentials();\n\n            if (options.enableAutoLogin === false) {\n                server.UserId = null;\n                server.AccessToken = null;\n            } else if (server.AccessToken && verifyLocalAuthentication) {\n                return void validateAuthentication(server, serverUrl).then(function () {\n                    onSuccessfulConnection(server, systemInfo, connectionMode, serverUrl, false, resolve, options);\n                });\n            }\n\n            updateServerInfo(server, systemInfo);\n\n            server.LastConnectionMode = connectionMode;\n\n            if (options.updateDateLastAccessed !== false) {\n                server.DateLastAccessed = new Date().getTime();\n            }\n            credentialProvider.addOrUpdateServer(credentials.Servers, server);\n            credentialProvider.credentials(credentials);\n\n            const result = {\n                Servers: []\n            };\n\n            result.ApiClient = self._getOrAddApiClient(server, serverUrl);\n\n            result.ApiClient.setSystemInfo(systemInfo);\n\n            result.State = server.AccessToken && options.enableAutoLogin !== false ? 'SignedIn' : 'ServerSignIn';\n\n            result.Servers.push(server);\n\n            // set this now before updating server info, otherwise it won't be set in time\n            result.ApiClient.enableAutomaticBitrateDetection = options.enableAutomaticBitrateDetection;\n\n            result.ApiClient.updateServerInfo(server, serverUrl);\n            result.ApiClient.setAuthenticationInfo(server.AccessToken, server.UserId);\n\n            const resolveActions = function () {\n                resolve(result);\n\n                events.trigger(self, 'connected', [result]);\n            };\n\n            if (result.State === 'SignedIn') {\n                afterConnected(result.ApiClient, options);\n\n                result.ApiClient.getCurrentUser().then((user) => {\n                    onLocalUserSignIn(server, serverUrl, user).then(resolveActions, resolveActions);\n                }, resolveActions);\n            } else {\n                resolveActions();\n            }\n        }\n\n        function tryConnectToAddress(address, options) {\n            const server = {\n                ManualAddress: address,\n                LastConnectionMode: ConnectionMode.Manual\n            };\n\n            return self.connectToServer(server, options).then((result) => {\n                // connectToServer never rejects, but resolves with State='Unavailable'\n                if (result.State === 'Unavailable') {\n                    return Promise.reject();\n                }\n                return result;\n            });\n        }\n\n        self.connectToAddress = function (address, options) {\n            if (!address) {\n                return Promise.reject();\n            }\n\n            address = normalizeAddress(address);\n\n            let urls = [];\n\n            if (/^[^:]+:\\/\\//.test(address)) {\n                // Protocol specified - connect as is\n                urls.push(address);\n            } else {\n                urls.push(`https://${address}`);\n                urls.push(`http://${address}`);\n            }\n\n            let i = 0;\n\n            function onFail() {\n                console.log(`connectToAddress ${urls[i]} failed`);\n\n                if (++i < urls.length) {\n                    return tryConnectToAddress(urls[i], options).catch(onFail);\n                }\n\n                return Promise.resolve({\n                    State: 'Unavailable'\n                });\n            }\n\n            return tryConnectToAddress(urls[i], options).catch(onFail);\n        };\n\n        self.deleteServer = (serverId) => {\n            if (!serverId) {\n                throw new Error('null serverId');\n            }\n\n            let server = credentialProvider.credentials().Servers.filter((s) => s.Id === serverId);\n            server = server.length ? server[0] : null;\n\n            return new Promise((resolve, reject) => {\n                function onDone() {\n                    const credentials = credentialProvider.credentials();\n\n                    credentials.Servers = credentials.Servers.filter((s) => s.Id !== serverId);\n\n                    credentialProvider.credentials(credentials);\n                    resolve();\n                }\n\n                if (!server.ConnectServerId) {\n                    onDone();\n                    return;\n                }\n            });\n        };\n    }\n\n    connect(options) {\n        console.log('Begin connect');\n\n        return this.getAvailableServers().then((servers) => {\n            return this.connectToServers(servers, options);\n        });\n    }\n\n    handleMessageReceived(msg) {\n        const serverId = msg.ServerId;\n        if (serverId) {\n            const apiClient = this.getApiClient(serverId);\n            if (apiClient) {\n                if (typeof msg.Data === 'string') {\n                    try {\n                        msg.Data = JSON.parse(msg.Data);\n                    } catch (err) {\n                        console.log('unable to parse json content: ' + err);\n                    }\n                }\n\n                apiClient.handleMessageReceived(msg);\n            }\n        }\n    }\n\n    getApiClients() {\n        const servers = this.getSavedServers();\n\n        for (let i = 0, length = servers.length; i < length; i++) {\n            const server = servers[i];\n            if (server.Id) {\n                this._getOrAddApiClient(server, getServerAddress(server, server.LastConnectionMode));\n            }\n        }\n\n        return this._apiClients;\n    }\n\n    getApiClient(item) {\n        if (!item) {\n            throw new Error('item or serverId cannot be null');\n        }\n\n        // Accept string + object\n        if (item.ServerId) {\n            item = item.ServerId;\n        }\n\n        return this._apiClients.filter((a) => {\n            const serverInfo = a.serverInfo();\n\n            // We have to keep this hack in here because of the addApiClient method\n            return !serverInfo || serverInfo.Id === item;\n        })[0];\n    }\n\n    minServerVersion(val) {\n        if (val) {\n            this._minServerVersion = val;\n        }\n\n        return this._minServerVersion;\n    }\n}\n","import events from './events';\nimport appStorage from './appStorage';\n\nfunction initialize(appStorage, key) {\n    const json = appStorage.getItem(key) || '{}';\n\n    console.log(`Stored JSON credentials: ${json}`);\n    let credentials = JSON.parse(json);\n    credentials.Servers = credentials.Servers || [];\n    return credentials;\n}\n\nfunction set(instance, data) {\n    if (data) {\n        instance._credentials = data;\n        instance.appStorage.setItem(instance.key, JSON.stringify(data));\n    } else {\n        instance.clear();\n    }\n\n    events.trigger(instance, 'credentialsupdated');\n}\n\nexport default class Credentials {\n    constructor(key) {\n        this.key = key || 'jellyfin_credentials';\n        this.appStorage = appStorage;\n        this._credentials = initialize(this.appStorage, this.key);\n    }\n\n    clear() {\n        this._credentials = null;\n        this.appStorage.removeItem(this.key);\n    }\n\n    credentials(data) {\n        if (data) {\n            set(this, data);\n        }\n\n        return this._credentials;\n    }\n\n    addOrUpdateServer(list, server) {\n        if (!server.Id) {\n            throw new Error('Server.Id cannot be null or empty');\n        }\n\n        const existing = list.filter(({ Id }) => Id === server.Id)[0];\n\n        if (existing) {\n            // Merge the data\n            existing.DateLastAccessed = Math.max(existing.DateLastAccessed || 0, server.DateLastAccessed || 0);\n\n            existing.UserLinkType = server.UserLinkType;\n\n            if (server.AccessToken) {\n                existing.AccessToken = server.AccessToken;\n                existing.UserId = server.UserId;\n            }\n            if (server.ExchangeToken) {\n                existing.ExchangeToken = server.ExchangeToken;\n            }\n            if (server.RemoteAddress) {\n                existing.RemoteAddress = server.RemoteAddress;\n            }\n            if (server.ManualAddress) {\n                existing.ManualAddress = server.ManualAddress;\n            }\n            if (server.LocalAddress) {\n                existing.LocalAddress = server.LocalAddress;\n            }\n            if (server.Name) {\n                existing.Name = server.Name;\n            }\n            if (server.LastConnectionMode != null) {\n                existing.LastConnectionMode = server.LastConnectionMode;\n            }\n            if (server.ConnectServerId) {\n                existing.ConnectServerId = server.ConnectServerId;\n            }\n\n            return existing;\n        } else {\n            list.push(server);\n            return server;\n        }\n    }\n}\n","import ApiClient from './apiClient';\nimport ApiClientCore from './apiClientCore';\nimport AppStorage from './appStorage';\nimport ConnectionManager from './connectionManager';\nimport Credentials from './credentials';\nimport Events from './events';\n\nexport default {\n    ApiClient,\n    ApiClientCore,\n    AppStorage,\n    ConnectionManager,\n    Credentials,\n    Events\n};\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","getCallbacks","name","Error","_callbacks","list","on","eventName","fn","push","off","i","indexOf","splice","trigger","eventObject","type","eventArgs","additionalArgs","arguments","length","callbacks","slice","forEach","c","apply","onCachePutFail","e","console","log","updateCache","instance","cache","put","Response","JSON","stringify","localData","catch","onCacheOpened","result","this","AppStore","caches","open","then","bind","err","value","localStorage","setItem","getItem","removeItem","getInstance","reportRateLimits","timeupdate","volumechange","redetectBitrate","stopBitrateDetection","accessToken","enableAutomaticBitrateDetection","setTimeout","redetectBitrateInternal","detectBitrate","detectTimeout","clearTimeout","replaceAll","originalString","strReplace","strWith","reg","RegExp","replace","onFetchFail","url","response","events","status","errorCode","headers","paramsToString","params","values","encodeURIComponent","join","fetchWithTimeout","options","timeoutMs","Promise","resolve","reject","timeout","credentials","fetch","error","getFetchPromise","request","dataType","accept","fetchRequest","method","contentType","data","body","cancelReportPlaybackProgressPromise","reportPlaybackProgressCancel","ApiClient","serverAddress","appName","appVersion","deviceName","deviceId","debug","_serverInfo","_serverAddress","_deviceId","_deviceName","_appName","_appVersion","_loggedIn","currentServerInfo","serverInfo","AccessToken","auth","val","toLowerCase","changed","onNetworkChange","lastDetectedBitrate","lastDetectedBitrateTime","setSavedEndpointInfo","charAt","enableReconnection","lastFetch","Date","getTime","json","text","toString","previousServerAddress","tryReconnect","fetchWithFailover","innerError","includeAuthorization","setRequestHeaders","enableAutomaticNetworking","accessKey","userId","_currentUser","UserId","info","Id","Name","enableCache","getCurrentUserId","user","serverPromise","getUser","userObject","appStorage","ServerId","getCachedUser","closeWebSocket","done","setAuthenticationInfo","getUrl","ajax","password","postData","Username","Pw","afterOnAuthenticated","onAuthenticated","secret","Secret","verb","getJSON","isWebSocketOpenOrConnecting","isWebSocketSupported","openWebSocket","apiClient","socket","webSocket","WebSocket","onmessage","onWebSocketMessage","onopen","onWebSocketOpen","onerror","onWebSocketError","onclose","clearKeepAlive","_webSocket","readyState","OPEN","close","msg","MessageType","Data","send","isWebSocketOpen","sendWebSocketMessage","CONNECTING","server","serverUrl","split","substring","byteSize","Size","now","responseTimeSeconds","bytesPerSecond","Math","round","force","getEndpointInfo","detectBitrateWithEndpointInfo","itemId","idList","isRead","suffix","Ids","urlPrefix","getRemoteImagePrefix","id","channelIds","item","feature","setSystemInfo","TargetId","app","client","deviceProfile","DeviceProfile","liveStreamId","LiveStreamId","path","installationId","guid","version","AssemblyGuid","DeviceId","PackageType","refreshLibrary","libraryOptions","collectionType","LibraryOptions","newName","virtualFolderName","mediaPath","networkSharePath","pathInfo","Path","NetworkPath","PathInfo","imageType","imageIndex","playSessionId","PlaySessionId","newIndex","api_key","file","startsWith","reader","FileReader","onabort","onload","target","readAsDataURL","language","isForced","SyntaxError","TypeError","format","lastIndexOf","includes","encodeName","index","normalizeImageOptions","quality","getDefaultImageQuality","minScale","ImageTags","Thumb","tag","getImageUrl","ParentThumbItemId","ParentThumbImageTag","currentPassword","newPassword","CurrentPw","NewPw","resetPassword","configuration","policy","triggers","isMinServerVersion","getItems","assign","SortBy","SortOrder","Filters","Recursive","CollapseBoxSetItems","ExcludeLocationTypes","inherit","InheritFromParent","serverId","SearchHints","date","toISOString","DatePlayed","getDateParamValue","isFavorite","likes","lastPlaybackProgressReport","lastPlaybackProgressReportTicks","EventName","reportRateLimitTime","msSinceLastReport","newPositionTicks","PositionTicks","expectedReportTicks","abs","undefined","reportPlaybackProgressTimeout","lastPlaybackProgressOptions","reportPlaybackProgressPromise","promise","cancelled","resetPromise","delay","max","lastOptions","sendReport","finally","actions","syncJobItemId","itemIds","targetId","ItemIds","sessionId","command","ajaxOptions","review","packageId","minRating","maxRating","limit","MinRating","MaxRating","Limit","_endPointInfo","savedValue","endPointInfo","_serverVersion","Version","serverVersion","a","b","aVal","parseInt","bVal","compareVersions","onMessageReceivedInternal","retryCount","addresses","addressesStrings","LocalAddress","ManualAddress","RemoteAddress","state","numAddresses","rejects","map","resolved","getTryConnectPromise","tryReconnectInternal","parse","messageIdsReceived","messageId","MessageId","keepAliveInterval","setInterval","clearInterval","normalizeReturnBitrate","bitrate","getMaxBandwidth","maxRate","min","detectBitrateInternal","tests","currentBitrate","test","getDownloadSpeed","bytes","threshold","endpointInfo","IsInNetwork","artist","person","genre","musicGenre","studio","ratio","window","devicePixelRatio","width","height","maxWidth","maxHeight","fillWidth","fillHeight","localPrefix","localViewPrefix","isLocalId","str","isLocalViewId","isTopLevelLocalViewId","stripLocalPrefix","res","stripStart","find","substr","convertGuidToLocal","adjustGuidProperties","downloadedItem","SeriesId","SeasonId","AlbumId","ParentId","ParentPrimaryImageItemId","PrimaryImageItemId","ParentLogoItemId","ParentBackdropItemId","ParentBackdropImageTags","getLocalView","getLocalFolders","views","localView","downloadsTitleText","Type","IsFolder","ApiClientCore","clientName","applicationVersion","localAssetManager","onFailure","getLocalItem","MediaSources","Item","m","SupportsDirectPlay","SupportsDirectStream","SupportsTranscoding","IsLocal","mediaSources","fileExists","LocalPath","exists","items","Items","TotalRecordCount","AlbumIds","getViewItems","ExcludeItemIds","exItems","ids","hasLocal","getItemsFromIds","basePromise","enableLocalView","filter","getViews","IncludeItemTypes","seasonId","itemid","ItemId","libraryItem","MediaType","UserData","PlaybackPositionTicks","PlayedPercentage","RunTimeTicks","addOrUpdateLocalItem","action","recordUserAction","getServerAddress","mode","resolveFailure","State","updateServerInfo","systemInfo","ServerName","getEmbyServerUrl","baseUrl","handler","normalizeAddress","address","trim","stringEqualsIgnoreCase","str1","str2","ConnectionManager","credentialProvider","capabilities","saveCredentials","servers","Servers","s","updateDateLastAccessed","DateLastAccessed","User","addOrUpdateServer","afterConnected","onLocalUserSignIn","reportCapabilities","enableWebSocket","ensureWebSocket","_getOrAddApiClient","onLocalUserSignedIn","validateAuthentication","logoutOfServer","logoutInfo","logout","convertEndpointAddressToManualAddress","Address","EndpointAddress","parts","portString","isNaN","onSuccessfulConnection","connectionMode","verifyLocalAuthentication","enableAutoLogin","LastConnectionMode","resolveActions","getCurrentUser","tryConnectToAddress","connectToServer","_apiClients","_minServerVersion","getServerInfo","getLastUsedServer","sort","addApiClient","existingServers","existingServer","manualAddressOnly","clearData","getApiClient","getOrCreateApiClient","localUser","u","image","PrimaryImageTag","getUserImageUrl","supportsParams","imageUrl","supportsImageParams","promises","all","UserLinkType","j","numServers","ExchangeToken","getSavedServers","getAvailableServers","onFinish","foundServers","foundServer","NativeShell","findServers","responses","list1","list2","mergeServers","connectToServers","firstServer","minServerVersion","connectToAddress","urls","onFail","deleteServer","ConnectServerId","handleMessageReceived","Credentials","_credentials","initialize","clear","set","existing","AppStorage","Events"],"sourceRoot":""}